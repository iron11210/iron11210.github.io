<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>杂项笔记</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>IRON</name>
    </author>
    <updated>2025-01-23T02:37:59.661Z</updated>
    <entry>
        <id>http://example.com/2025/01/23/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%20-%20%E5%89%AF%E6%9C%AC%20(3)/</id>
        <title>背包系统优化</title>
        <link rel="alternate" href="http://example.com/2025/01/23/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
        <content type="html">&lt;p&gt;在原本的 Inventory 的基础上，我发现一个问题，每当我需要列出一个新的列表的时候，我都需要创建一个新的 list 和 dectionary 在 Inventory 的每个方法中重新注册一遍，这太麻烦了，违背了低耦合性的原则，所以我对 inventory 重新进行了整理。&lt;/p&gt;
&lt;p&gt;我创建了 IInventoryCategory 接口来对 Inventory 中常用的方法进行了抽象管理&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IInventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建一个 InventoryCategory 用以管理大的类别&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;InventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt; items = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt; itemDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UI_ItemSlot[] uiSlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InventoryCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;UI_ItemSlot[] slots&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots = slots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt; =&amp;gt; items.Count &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? items[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].data.itemType : ItemType.None;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时将一些方法进行重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 添加新物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否已经存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品不存在，创建一个新的 InventoryItem 并添加到列表和字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InventoryItem newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        itemDictionary[item] = newItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品已存在，则增加其堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;RemoveItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;RemoveItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果物品堆叠数量大于 1，减少堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            itemDictionary.Remove(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateUI&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新 UI 槽位以显示当前的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 清空所有 UI 槽位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; slot &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; uiSlots)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slot.CleanUpSlot();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将当前的物品更新到槽位中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; items.Count &amp;amp;&amp;amp; i &amp;lt; uiSlots.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots[i].UpdateSlot(items[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateSelectedItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UpdateSelectedItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新选中物品的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有物品，更新它们的选中状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品是选中的，则标记为选中，否则取消选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item.data.isSelect = item.data == selectedItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于我需要单独列出 Equipment 下的小分类：Book 和 Weapon&lt;br&gt;
 所以我需要再创建一个类来对 Equipment 中的小分类进行单独的筛选以及其他操作&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;EquipmentCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 管理装备类型物品的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其物品列表的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt; typeToItems;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其 UI 槽位数组的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; typeToUISlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 构造函数，用于初始化装备分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; slotsMapping&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToItems = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToUISlots = slotsMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 为每种装备类型创建空的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; typeToUISlots.Keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            typeToItems[type] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 返回此分类的物品类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ItemType.Equipment;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 添加物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否已经存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果已存在，增加堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果不存在，添加新的物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量大于 1，则减少数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，则完全移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;//...以及其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 Inventory 中统一注册管理这些 Category&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Inventory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InitializeCategories&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipment = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData_Equipment, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取 UI 格子组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inventoryItemSlot = inventorySlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stashItemSlot = stashSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlot = equpmentSlotParent.GetComponentsInChildren&amp;lt;UI_EquipmentSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bookSlot = bookSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;weaponSlot = weaponSlotParent.GetComponentsInChildren&amp;lt;UI_WeaponSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 初始化每种装备类型对应的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlotsMapping = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Book, bookSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Weapon, weaponSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// &amp;#123; EquipmentType.Armor, armorSlots &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将映射传递给 EquipmentCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; EquipmentCategory(equipmentSlotsMapping);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;categories = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemType, IInventoryCategory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Equipment, equipmentCategory &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Material, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryCategory(stashItemSlot) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 随后就可以逐一优化方法，有新的列表加入的时候就不再需要全部注册一遍方法了&lt;br&gt;
以 AddItem 为例&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cannot add a null item to inventory.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据 ItemType 找到对应的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (categories.TryGetValue(_item.itemType, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; IInventoryCategory category))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果是 Equipment 类型，需要进一步处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对 Equipment 类型，调用分类管理的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = category &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; EquipmentCategory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                equipmentCategory?.AddItem(equipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对非 Equipment 类型（如 Material），直接添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                category.AddItem(_item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;$&amp;quot;No category found for ItemType &lt;span class=&#34;subst&#34;&gt;&amp;#123;_item.itemType&amp;#125;&lt;/span&gt;. Check your category setup.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-23T02:37:59.661Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/23/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%20-%20%E5%89%AF%E6%9C%AC%20(2)/</id>
        <title>背包系统优化</title>
        <link rel="alternate" href="http://example.com/2025/01/23/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
        <content type="html">&lt;p&gt;在原本的 Inventory 的基础上，我发现一个问题，每当我需要列出一个新的列表的时候，我都需要创建一个新的 list 和 dectionary 在 Inventory 的每个方法中重新注册一遍，这太麻烦了，违背了低耦合性的原则，所以我对 inventory 重新进行了整理。&lt;/p&gt;
&lt;p&gt;我创建了 IInventoryCategory 接口来对 Inventory 中常用的方法进行了抽象管理&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IInventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建一个 InventoryCategory 用以管理大的类别&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;InventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt; items = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt; itemDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UI_ItemSlot[] uiSlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InventoryCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;UI_ItemSlot[] slots&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots = slots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt; =&amp;gt; items.Count &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? items[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].data.itemType : ItemType.None;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时将一些方法进行重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 添加新物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否已经存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品不存在，创建一个新的 InventoryItem 并添加到列表和字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InventoryItem newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        itemDictionary[item] = newItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品已存在，则增加其堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;RemoveItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;RemoveItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果物品堆叠数量大于 1，减少堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            itemDictionary.Remove(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateUI&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新 UI 槽位以显示当前的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 清空所有 UI 槽位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; slot &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; uiSlots)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slot.CleanUpSlot();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将当前的物品更新到槽位中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; items.Count &amp;amp;&amp;amp; i &amp;lt; uiSlots.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots[i].UpdateSlot(items[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateSelectedItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UpdateSelectedItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新选中物品的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有物品，更新它们的选中状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品是选中的，则标记为选中，否则取消选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item.data.isSelect = item.data == selectedItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于我需要单独列出 Equipment 下的小分类：Book 和 Weapon&lt;br&gt;
 所以我需要再创建一个类来对 Equipment 中的小分类进行单独的筛选以及其他操作&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;EquipmentCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 管理装备类型物品的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其物品列表的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt; typeToItems;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其 UI 槽位数组的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; typeToUISlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 构造函数，用于初始化装备分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; slotsMapping&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToItems = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToUISlots = slotsMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 为每种装备类型创建空的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; typeToUISlots.Keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            typeToItems[type] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 返回此分类的物品类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ItemType.Equipment;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 添加物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否已经存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果已存在，增加堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果不存在，添加新的物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量大于 1，则减少数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，则完全移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;//...以及其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 Inventory 中统一注册管理这些 Category&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Inventory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InitializeCategories&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipment = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData_Equipment, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取 UI 格子组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inventoryItemSlot = inventorySlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stashItemSlot = stashSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlot = equpmentSlotParent.GetComponentsInChildren&amp;lt;UI_EquipmentSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bookSlot = bookSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;weaponSlot = weaponSlotParent.GetComponentsInChildren&amp;lt;UI_WeaponSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 初始化每种装备类型对应的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlotsMapping = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Book, bookSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Weapon, weaponSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// &amp;#123; EquipmentType.Armor, armorSlots &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将映射传递给 EquipmentCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; EquipmentCategory(equipmentSlotsMapping);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;categories = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemType, IInventoryCategory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Equipment, equipmentCategory &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Material, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryCategory(stashItemSlot) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 随后就可以逐一优化方法，有新的列表加入的时候就不再需要全部注册一遍方法了&lt;br&gt;
以 AddItem 为例&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cannot add a null item to inventory.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据 ItemType 找到对应的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (categories.TryGetValue(_item.itemType, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; IInventoryCategory category))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果是 Equipment 类型，需要进一步处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对 Equipment 类型，调用分类管理的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = category &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; EquipmentCategory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                equipmentCategory?.AddItem(equipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对非 Equipment 类型（如 Material），直接添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                category.AddItem(_item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;$&amp;quot;No category found for ItemType &lt;span class=&#34;subst&#34;&gt;&amp;#123;_item.itemType&amp;#125;&lt;/span&gt;. Check your category setup.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-23T02:37:59.103Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/23/game-engine/unity/unityProject01/unity%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABscript%E9%94%99%E8%AF%AF/</id>
        <title>unity无法识别script错误</title>
        <link rel="alternate" href="http://example.com/2025/01/23/game-engine/unity/unityProject01/unity%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABscript%E9%94%99%E8%AF%AF/"/>
        <content type="html">&lt;p&gt;在开发的过程中，碰到了一个很奇怪的问题&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity/unity2d/%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABscript.png&#34; alt&gt;&lt;br&gt;
而且是本来能够挂载到对象上的 script 忽然报错显示挂载失败，虽然修改了程序中的一些可能造成报错的代码后挂载成功，但是还是很奇怪&lt;br&gt;
实际上原因是因为 unity 自身加载失败的问题，把 library 文件删了再重新启动一遍项目即可解决。&lt;br&gt;
同时可能存在的其他问题：如果 script 自身有编译错误或者类名和文件名不符也可能会产生这个报错。&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-23T02:37:59.067Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/21/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/</id>
        <title>背包系统优化</title>
        <link rel="alternate" href="http://example.com/2025/01/21/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;p&gt;在原本的 Inventory 的基础上，我发现一个问题，每当我需要列出一个新的列表的时候，我都需要创建一个新的 list 和 dectionary 在 Inventory 的每个方法中重新注册一遍，这太麻烦了，违背了低耦合性的原则，所以我对 inventory 重新进行了整理。&lt;/p&gt;
&lt;p&gt;我创建了 IInventoryCategory 接口来对 Inventory 中常用的方法进行了抽象管理&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;IInventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建一个 InventoryCategory 用以管理大的类别&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;InventoryCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt; items = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt; itemDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UI_ItemSlot[] uiSlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InventoryCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;UI_ItemSlot[] slots&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots = slots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt; =&amp;gt; items.Count &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? items[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].data.itemType : ItemType.None;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时将一些方法进行重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 添加新物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否已经存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品不存在，创建一个新的 InventoryItem 并添加到列表和字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InventoryItem newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        itemDictionary[item] = newItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品已存在，则增加其堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;RemoveItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;RemoveItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查物品是否存在于字典中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (itemDictionary.TryGetValue(item, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; InventoryItem existingItem))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果物品堆叠数量大于 1，减少堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            itemDictionary.Remove(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新 UI 以反映最新的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UpdateUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateUI&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新 UI 槽位以显示当前的物品状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateUI&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 清空所有 UI 槽位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; slot &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; uiSlots)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slot.CleanUpSlot();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将当前的物品更新到槽位中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; items.Count &amp;amp;&amp;amp; i &amp;lt; uiSlots.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uiSlots[i].UpdateSlot(items[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;UpdateSelectedItem&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UpdateSelectedItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 更新选中物品的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSelectedItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData selectedItem&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有物品，更新它们的选中状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果物品是选中的，则标记为选中，否则取消选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        item.data.isSelect = item.data == selectedItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于我需要单独列出 Equipment 下的小分类：Book 和 Weapon&lt;br&gt;
 所以我需要再创建一个类来对 Equipment 中的小分类进行单独的筛选以及其他操作&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;EquipmentCategory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 管理装备类型物品的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;IInventoryCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其物品列表的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt; typeToItems;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每种装备类型与其 UI 槽位数组的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; typeToUISlots;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 构造函数，用于初始化装备分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipmentCategory&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt; slotsMapping&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToItems = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, List&amp;lt;InventoryItem&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        typeToUISlots = slotsMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 为每种装备类型创建空的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; typeToUISlots.Keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            typeToItems[type] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 返回此分类的物品类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType &lt;span class=&#34;title&#34;&gt;GetItemType&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ItemType.Equipment;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 添加物品到分类中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否已经存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果已存在，增加堆叠数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                existingItem.AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果不存在，添加新的物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                items.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从分类中移除物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 确保物品是装备类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = equipment.equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取该类型的物品列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; items = typeToItems[type];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否存在该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; existingItem = items.FirstOrDefault(i =&amp;gt; i.data == item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (existingItem.stackSize &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量大于 1，则减少数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    existingItem.RemoveStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 如果堆叠数量为 1，则完全移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    items.Remove(existingItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新对应类型的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                UpdateEquipmentSlots(type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;//...以及其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 Inventory 中统一注册管理这些 Category&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Inventory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InitializeCategories&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipment = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentDictionary = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemData_Equipment, InventoryItem&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取 UI 格子组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inventoryItemSlot = inventorySlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stashItemSlot = stashSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlot = equpmentSlotParent.GetComponentsInChildren&amp;lt;UI_EquipmentSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bookSlot = bookSlotParent.GetComponentsInChildren&amp;lt;UI_ItemSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;weaponSlot = weaponSlotParent.GetComponentsInChildren&amp;lt;UI_WeaponSlot&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 初始化每种装备类型对应的 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;equipmentSlotsMapping = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;EquipmentType, UI_ItemSlot[]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Book, bookSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; EquipmentType.Weapon, weaponSlot &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// &amp;#123; EquipmentType.Armor, armorSlots &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将映射传递给 EquipmentCategory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; EquipmentCategory(equipmentSlotsMapping);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;categories = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;ItemType, IInventoryCategory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Equipment, equipmentCategory &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; ItemType.Material, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryCategory(stashItemSlot) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 随后就可以逐一优化方法，有新的列表加入的时候就不再需要全部注册一遍方法了&lt;br&gt;
以 AddItem 为例&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AddItem&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cannot add a null item to inventory.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据 ItemType 找到对应的分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (categories.TryGetValue(_item.itemType, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; IInventoryCategory category))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果是 Equipment 类型，需要进一步处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_item &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ItemData_Equipment equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对 Equipment 类型，调用分类管理的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; equipmentCategory = category &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; EquipmentCategory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                equipmentCategory?.AddItem(equipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 针对非 Equipment 类型（如 Material），直接添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                category.AddItem(_item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.LogWarning(&lt;span class=&#34;string&#34;&gt;$&amp;quot;No category found for ItemType &lt;span class=&#34;subst&#34;&gt;&amp;#123;_item.itemType&amp;#125;&lt;/span&gt;. Check your category setup.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-21T11:20:31.518Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/18/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/</id>
        <title>背包系统</title>
        <link rel="alternate" href="http://example.com/2025/01/18/game-engine/unity/unityProject01/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h2 id=&#34;背包系统总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背包系统总结&#34;&gt;#&lt;/a&gt; 背包系统总结&lt;/h2&gt;
&lt;p&gt;前言：这一部分并不复杂，所以我将通过功能模块的区分来记录而不是细分每一个文件的功能与彼此之间的逻辑来记录&lt;/p&gt;
&lt;h3 id=&#34;1-存储模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-存储模块&#34;&gt;#&lt;/a&gt; 1. 存储模块&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ItemData.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; ItemType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Material,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Equipment&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;CreateAssetMenu(fileName = &lt;span class=&#34;string&#34;&gt;&amp;quot;New Item Data&amp;quot;&lt;/span&gt;, menuName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Data/Item&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ItemData&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ScriptableObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemType itemType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; itemName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Sprite icon;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Range(0,100)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; dropChance;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先创建一个 itemdata 的基类，用来存储一些所有物品都会有的属性，其次在此基础上通过继承来创建一些其他的类，比如装备等&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ItemData_Equipment.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Unity.VisualScripting;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 装备类型的枚举定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; EquipmentType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Weapon,       &lt;span class=&#34;comment&#34;&gt;// 武器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Armor,        &lt;span class=&#34;comment&#34;&gt;// 防具&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Amulet,       &lt;span class=&#34;comment&#34;&gt;// 护符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Flask         &lt;span class=&#34;comment&#34;&gt;// 药剂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一个新的可创建的脚本资源菜单项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;CreateAssetMenu(fileName = &lt;span class=&#34;string&#34;&gt;&amp;quot;New Item Data&amp;quot;&lt;/span&gt;, menuName = &lt;span class=&#34;string&#34;&gt;&amp;quot;Data/Equipment&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ItemData_Equipment&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ItemData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 装备的类型，例如武器、防具等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; EquipmentType equipmentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 物品冷却时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; itemCooldown;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 物品效果数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemEffect[] itemEffects;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Major stats&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; strength;        &lt;span class=&#34;comment&#34;&gt;// 力量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; agility;         &lt;span class=&#34;comment&#34;&gt;// 敏捷&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; intelligence;    &lt;span class=&#34;comment&#34;&gt;// 智力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; vitality;        &lt;span class=&#34;comment&#34;&gt;// 体力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Offensive stats&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; damage;          &lt;span class=&#34;comment&#34;&gt;// 攻击力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; critChance;      &lt;span class=&#34;comment&#34;&gt;// 暴击几率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; critPower;       &lt;span class=&#34;comment&#34;&gt;// 暴击伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Defensive stats&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; health;          &lt;span class=&#34;comment&#34;&gt;// 生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; armor;           &lt;span class=&#34;comment&#34;&gt;// 护甲值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; evasion;         &lt;span class=&#34;comment&#34;&gt;// 闪避值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; magicResistance; &lt;span class=&#34;comment&#34;&gt;// 魔法抗性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Magic stats&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; fireDamage;      &lt;span class=&#34;comment&#34;&gt;// 火焰伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; iceDamage;       &lt;span class=&#34;comment&#34;&gt;// 冰霜伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; lightingDamage;  &lt;span class=&#34;comment&#34;&gt;// 闪电伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Craft requirements&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt; craftingMaterials; &lt;span class=&#34;comment&#34;&gt;// 合成所需材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 执行物品效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Effect&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Transform _enemyPosition&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历所有物品效果并在指定敌人位置执行效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; itemEffects)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            item.ExecuteEffect(_enemyPosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 添加物品的属性修饰符到玩家身上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddModifiers&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PlayerStats playerStats = PlayerManager.instance.player.GetComponent&amp;lt;PlayerStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 添加主要属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.strength.AddModifier(strength);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.agility.AddModifier(agility);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.intelligence.AddModifier(intelligence);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.vitality.AddModifier(vitality);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 添加攻击属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.damage.AddModifier(damage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.critChance.AddModifier(critChance);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.critPower.AddModifier(critPower);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 添加防御属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.maxHealth.AddModifier(health);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.armor.AddModifier(armor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.evasion.AddModifier(evasion);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.magicResistance.AddModifier(magicResistance);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 添加魔法属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.fireDamage.AddModifier(fireDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.iceDamage.AddModifier(iceDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.lightingDamage.AddModifier(lightingDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 移除物品的属性修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveModifiers&lt;/span&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PlayerStats playerStats = PlayerManager.instance.player.GetComponent&amp;lt;PlayerStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 移除主要属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.strength.RemoveModifier(strength);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.agility.RemoveModifier(agility);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.intelligence.RemoveModifier(intelligence);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.vitality.RemoveModifier(vitality);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 移除攻击属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.damage.RemoveModifier(damage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.critChance.RemoveModifier(critChance);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.critPower.RemoveModifier(critPower);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 移除防御属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.maxHealth.RemoveModifier(health);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.armor.RemoveModifier(armor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.evasion.RemoveModifier(evasion);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.magicResistance.RemoveModifier(magicResistance);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 移除魔法属性的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.fireDamage.RemoveModifier(fireDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.iceDamage.RemoveModifier(iceDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        playerStats.lightingDamage.RemoveModifier(lightingDamage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在此基础上通过 InventoryItem 来作为某个种类的仓库 (?) 来进行入栈出栈的操作以存储数据&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;InventoryItem.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;Serializable&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InventoryItem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemData data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; stackSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InventoryItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _newItemData&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = _newItemData;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        AddStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AddStack&lt;/span&gt;()&lt;/span&gt; =&amp;gt; stackSize++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RemoveStack&lt;/span&gt;()&lt;/span&gt; =&amp;gt; stackSize--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后通过 Inventory 来联动仓库与 UI 的变动&lt;/p&gt;
&lt;h3 id=&#34;2-人物装备模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-人物装备模块&#34;&gt;#&lt;/a&gt; 2. 人物装备模块&lt;/h3&gt;
&lt;p&gt;主要通过这部分代码来实现装备与仓库之间的联动与单个装备只能装备一个的功能&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Inventory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EquipItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 装备新物品并替换旧物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ItemData_Equipment newEquipment = _item &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ItemData_Equipment;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InventoryItem newItem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InventoryItem(newEquipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ItemData_Equipment oldEquipment = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 查找相同类型的已装备物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;ItemData_Equipment, InventoryItem&amp;gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; equipmentDictionary)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item.Key.equipmentType == newEquipment.equipmentType)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                oldEquipment = item.Key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果存在旧装备，将其卸下并添加回背包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (oldEquipment != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            UnequipItem(oldEquipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            AddItem(oldEquipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 装备新物品并更新字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        equipment.Add(newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        equipmentDictionary.Add(newEquipment, newItem);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newEquipment.AddModifiers();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 从背包移除新装备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RemoveItem(_item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 更新 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        UpdateSlotUI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;UI 当中在仓库点击装备&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UI_ItemSlot&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnPointerDown&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;PointerEventData eventData&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Input.GetKey(KeyCode.LeftControl))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Inventory.instance.RemoveItem(item.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item.data.itemType == ItemType.Equipment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Inventory.instance.EquipItem(item.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 UI 当中装备栏点击卸下&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UI_EquipmentSlot.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnPointerDown&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;PointerEventData eventData&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Inventory.instance.UnequipItem(item.data &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ItemData_Equipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Inventory.instance.AddItem(item.data &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ItemData_Equipment);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CleanUpSlot();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-敌人玩家死亡掉落系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-敌人玩家死亡掉落系统&#34;&gt;#&lt;/a&gt; 3. 敌人 / 玩家死亡掉落系统&lt;/h3&gt;
&lt;h4 id=&#34;敌人掉落&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#敌人掉落&#34;&gt;#&lt;/a&gt; 敌人掉落&lt;/h4&gt;
&lt;p&gt;挂载 ItemDrop 方法在敌人身上，控制掉落&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ItemDrop.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GenerateDrop&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历所有可能掉落的物品，按照掉落几率决定是否加入掉落列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; possibleDrop.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &amp;lt;= possibleDrop[i].dropChance) &lt;span class=&#34;comment&#34;&gt;// 随机生成一个 0 到 100 的值，与掉落几率比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dropList.Add(possibleDrop[i]); &lt;span class=&#34;comment&#34;&gt;// 将符合条件的物品加入掉落列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据掉落数量上限，从掉落列表中随机选择物品并掉落&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; possibleItemDrop; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ItemData randomItem = dropList[Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, dropList.Count - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)]; &lt;span class=&#34;comment&#34;&gt;// 随机选择一个物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dropList.Remove(randomItem); &lt;span class=&#34;comment&#34;&gt;// 从列表中移除已掉落的物品，避免重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            DropItem(randomItem); &lt;span class=&#34;comment&#34;&gt;// w调用方法生成掉落物体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 创建掉落物体的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DropItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ItemData _itemData&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 在当前物体位置生成一个新的掉落物体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        GameObject newDrop = Instantiate(dropPrefab, transform.position, Quaternion.identity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 为掉落物体赋予一个随机的初始速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Vector2 randomVelocity = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(Random.Range(&lt;span class=&#34;number&#34;&gt;-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), Random.Range(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置掉落物体的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newDrop.GetComponent&amp;lt;ItemObject&amp;gt;().SetupItem(_itemData, randomVelocity);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 EnemyStatus 中敌人死去时下方挂上 DropItem 方法&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;EnemyStatus&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Die&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;base&lt;/span&gt;.Die();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        enemy.Die();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        myDropSystem.GenerateDrop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;玩家掉落&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#玩家掉落&#34;&gt;#&lt;/a&gt; 玩家掉落&lt;/h4&gt;
&lt;p&gt;玩家掉落这块重写了一个方法，因为玩家的掉落需要考虑是否有装备掉落或是材料掉落&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;PlayerItemDrop.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PlayerItemDrop&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ItemDrop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;Player&amp;#x27;s drop&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; chanceToLooseItems; &lt;span class=&#34;comment&#34;&gt;// 玩家失去装备的几率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; chanceToLooseMaterials; &lt;span class=&#34;comment&#34;&gt;// 玩家失去材料的几率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 重写生成掉落物品的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GenerateDrop&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Inventory inventory = Inventory.instance; &lt;span class=&#34;comment&#34;&gt;// 获取玩家的物品管理实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;InventoryItem&amp;gt; itemsToUnequip = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;(); &lt;span class=&#34;comment&#34;&gt;// 用于存储需要卸下的装备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;InventoryItem&amp;gt; materialsToLoose = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; List&amp;lt;InventoryItem&amp;gt;(); &lt;span class=&#34;comment&#34;&gt;// 用于存储需要丢失的材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历玩家的装备列表，根据几率决定是否掉落装备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (InventoryItem item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; inventory.GetEquipmentList())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &amp;lt;= chanceToLooseItems)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                DropItem(item.data); &lt;span class=&#34;comment&#34;&gt;// 掉落该物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                itemsToUnequip.Add(item); &lt;span class=&#34;comment&#34;&gt;// 将物品加入需要卸下的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 卸下所有被选中的装备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; itemsToUnequip.Count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inventory.UnequipItem(itemsToUnequip[i].data &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; ItemData_Equipment); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历玩家的仓库列表，根据几率决定是否丢失材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (InventoryItem item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; inventory.GetStashList())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;) &amp;lt;= chanceToLooseMaterials)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                DropItem(item.data); &lt;span class=&#34;comment&#34;&gt;// 掉落该材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                materialsToLoose.Add(item); &lt;span class=&#34;comment&#34;&gt;// 将材料加入需要丢失的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 从玩家仓库中移除所有被选中的材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; materialsToLoose.Count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inventory.RemoveItem(materialsToLoose[i].data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;4特殊装备系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4特殊装备系统&#34;&gt;#&lt;/a&gt; 4. 特殊装备系统&lt;/h3&gt;
&lt;p&gt;我们需要一些装备拥有一些特殊的性能，比如可以造成电击，抑或是可以恢复血量。&lt;br&gt;
创建一个基类存储方法&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ItemEffect.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ItemEffect&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ScriptableObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ExecuteEffect&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Transform _enemyPosition&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Debug.Log(&lt;span class=&#34;string&#34;&gt;&amp;quot;Effect executed!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 在 Equipment 中创建数组储存 Effect 方法并创建一个方法用于调用这些方法&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ItemData_Equipment.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 物品效果数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemEffect[] itemEffects;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 执行物品效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Effect&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Transform _enemyPosition&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历所有物品效果并在指定敌人位置执行效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; itemEffects)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            item.ExecuteEffect(_enemyPosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 同时在 Inventory 中创建获取指定装备的方法&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Inventory.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ItemData_Equipment &lt;span class=&#34;title&#34;&gt;GetEquipment&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;EquipmentType _type&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取指定类型的装备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ItemData_Equipment equipedItem = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (KeyValuePair&amp;lt;ItemData_Equipment, InventoryItem&amp;gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; equipmentDictionary)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (item.Key.equipmentType == _type)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                equipedItem = item.Key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; equipedItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 然后在 PlayerAnimationTriggers 中攻击时调用效果&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;PlayerAnimationTriggers.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AttackTrigger&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取攻击范围内的所有碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Collider2D[] colliders = Physics2D.OverlapCircleAll(player.attackCheck.position, player.attackCheckRadius);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; hit &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; colliders)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 检查是否是敌人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hit.GetComponent&amp;lt;Enemy&amp;gt;() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取敌人的状态组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            EnemyStats _target = hit.GetComponent&amp;lt;EnemyStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果敌人状态存在，对敌人造成伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(_target != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                player.stats.DoDamage(_target);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取玩家当前装备的武器数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ItemData_Equipment weaponData = Inventory.instance.GetEquipment(EquipmentType.Weapon);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果有装备武器，执行武器的特殊效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (weaponData != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                weaponData.Effect(_target.transform);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;5一些特殊能力的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5一些特殊能力的实现&#34;&gt;#&lt;/a&gt; 5. 一些特殊能力的实现&lt;/h3&gt;
&lt;p&gt;这边以雷击效果举例，其他效果将不再赘述&lt;br&gt;
将 controller 文件绑定在雷击动画上，并将其作为预制件&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ThunderStrike_Controller.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ThunderStrike_Controller&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnTriggerEnter2D&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Collider2D collision&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(collision.GetComponent&amp;lt;Enemy&amp;gt;() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            PlayerStats playerStats = PlayerManager.instance.player.GetComponent&amp;lt;PlayerStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            EnemyStats enemyTarget = collision.GetComponent&amp;lt;EnemyStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            playerStats.DoMagicalDamage(enemyTarget);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 然后，将预制件放在 effect 的 data 中，再将 effect 放在武器的 data 中，达成绑定效果。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity/unity2d/%E7%BB%91%E5%AE%9Aprefab.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity%2Funity2d%2F%E7%BB%91%E5%AE%9Aeffect.png&#34; alt&gt;&lt;br&gt;
然后是电击后的自动索敌效果，同理创建了一个 ShockStrike_Controller 控制类来实现逻辑&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ShockStrike_Controller.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ShockStrike_Controller&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; CharacterStats targetStats; &lt;span class=&#34;comment&#34;&gt;// 目标的状态信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; speed; &lt;span class=&#34;comment&#34;&gt;// 移动速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; damage; &lt;span class=&#34;comment&#34;&gt;// 造成的伤害值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Animator anim; &lt;span class=&#34;comment&#34;&gt;// 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; triggered; &lt;span class=&#34;comment&#34;&gt;// 是否已经触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        anim = GetComponentInChildren&amp;lt;Animator&amp;gt;(); &lt;span class=&#34;comment&#34;&gt;// 获取子物体中的动画组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化攻击的伤害值和目标状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Setup&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; _damage, CharacterStats _targetStats&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        damage = _damage; &lt;span class=&#34;comment&#34;&gt;// 设置伤害值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetStats = _targetStats; &lt;span class=&#34;comment&#34;&gt;// 设置目标状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每帧更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!targetStats) &lt;span class=&#34;comment&#34;&gt;// 如果没有目标，则退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (triggered) &lt;span class=&#34;comment&#34;&gt;// 如果已经触发，则退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 移动到目标位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.position = Vector2.MoveTowards(transform.position, targetStats.transform.position, speed * Time.deltaTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 调整朝向，指向目标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.right = transform.position - targetStats.transform.position;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 检查是否到达目标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Vector2.Distance(transform.position, targetStats.transform.position) &amp;lt; &lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            anim.transform.localPosition = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;.5&lt;/span&gt;f); &lt;span class=&#34;comment&#34;&gt;// 调整动画位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            anim.transform.localRotation = Quaternion.identity; &lt;span class=&#34;comment&#34;&gt;// 重置动画旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            transform.localRotation = Quaternion.identity; &lt;span class=&#34;comment&#34;&gt;// 重置自身旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            transform.localScale = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 放大自身以展现效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 延迟执行伤害并销毁自身&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Invoke(&lt;span class=&#34;string&#34;&gt;&amp;quot;DamageAndSelfDestroy&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            triggered = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 标记为已触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            anim.SetTrigger(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hit&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 播放击中动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 对目标造成伤害并销毁自身&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DamageAndSelfDestroy&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetStats.ApplyShock(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 触发目标的震荡效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetStats.TakeDamage(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 对目标造成 1 点伤害&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Destroy(gameObject, &lt;span class=&#34;number&#34;&gt;.4&lt;/span&gt;f); &lt;span class=&#34;comment&#34;&gt;// 在 0.4 秒后销毁自身&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-18T15:30:57.304Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/18/game-engine/unity/unityProject01/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F02(Controller%20part)/</id>
        <title>技能系统02(Controller part)</title>
        <link rel="alternate" href="http://example.com/2025/01/18/game-engine/unity/unityProject01/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F02(Controller%20part)/"/>
        <content type="html">&lt;h1 id=&#34;skill-系统总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skill-系统总结&#34;&gt;#&lt;/a&gt; Skill 系统总结&lt;/h1&gt;
&lt;h2 id=&#34;skill&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skill&#34;&gt;#&lt;/a&gt; Skill&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Skill&lt;/code&gt;  类是所有技能类的基础类，提供通用的技能逻辑和方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;主要特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h3&gt;
&lt;h3 id=&#34;1-冷却机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-冷却机制&#34;&gt;#&lt;/a&gt; 1. 冷却机制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过  &lt;code&gt;cooldown&lt;/code&gt;  和  &lt;code&gt;cooldownTimer&lt;/code&gt;  属性管理技能的冷却时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每帧更新冷却计时器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cooldownTimer -= Time.deltaTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-技能使用逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-技能使用逻辑&#34;&gt;#&lt;/a&gt; 2. 技能使用逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供  &lt;code&gt;CanUseSkill()&lt;/code&gt;  方法检查技能是否可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果可以使用技能，则重置冷却时间并调用  &lt;code&gt;UseSkill()&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-2&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CanUseSkill&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cooldownTimer &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        UseSkill();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cooldownTimer = cooldown;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    player.fx.CreatePopUpText(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cooldown&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-解锁检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-解锁检测&#34;&gt;#&lt;/a&gt; 3. 解锁检测&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供  &lt;code&gt;CheckUnlock()&lt;/code&gt;  方法，用于子类实现具体的解锁逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在  &lt;code&gt;Start()&lt;/code&gt;  方法中调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-3&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    player = PlayerManager.instance.player;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CheckUnlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-最近敌人查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-最近敌人查找&#34;&gt;#&lt;/a&gt; 4. 最近敌人查找&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供  &lt;code&gt;FindClosestEnemy()&lt;/code&gt;  方法，用于查找指定范围内最近的敌人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-4&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; Transform &lt;span class=&#34;title&#34;&gt;FindClosestEnemy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Transform _checkTransform&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在指定的 Transform（_checkTransform）周围的半径为25的范围内查找所有的碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Collider2D[] colliders = Physics2D.OverlapCircleAll(_checkTransform.position, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化最近敌人的距离为正无穷大，以便找到最近的敌人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; closestDistance = Mathf.Infinity;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化最近敌人的 Transform 变量为 null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Transform closestEnemy = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有检测到的碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; hit &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; colliders)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 检查当前碰撞体是否附加了一个 Enemy 脚本（表示这是一个敌人）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hit.GetComponent&amp;lt;Enemy&amp;gt;() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 计算 _checkTransform 到当前敌人的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; distanceToEnemy = Vector2.Distance(_checkTransform.position, hit.transform.position);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果当前敌人距离小于之前记录的最近距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (distanceToEnemy &amp;lt; closestDistance)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新最近的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                closestDistance = distanceToEnemy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新最近敌人的 Transform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                closestEnemy = hit.transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 返回最近敌人的 Transform（如果没有敌人，则返回 null）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; closestEnemy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;子类继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子类继承&#34;&gt;#&lt;/a&gt; 子类继承&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Skill&lt;/code&gt;  类提供了基础功能，供所有技能类继承和扩展。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Clone_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;子类可以重写以下方法以实现自定义逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Start()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Update()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UseSkill()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CheckUnlock()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;skillmanager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skillmanager&#34;&gt;#&lt;/a&gt; SkillManager&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SkillManager&lt;/code&gt;  类是技能系统的核心组件，负责初始化并提供对所有技能实例的全局访问。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;主要特点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点-2&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h3&gt;
&lt;h3 id=&#34;1-单例模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-单例模式&#34;&gt;#&lt;/a&gt; 1. 单例模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保  &lt;code&gt;SkillManager&lt;/code&gt;  全局仅有一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可通过静态属性  &lt;code&gt;instance&lt;/code&gt;  进行访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-5&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private void Awake()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (instance != null)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Destroy(instance.gameObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instance = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果已有另一个实例，销毁当前游戏对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则，将当前对象设置为全局实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-技能实例管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-技能实例管理&#34;&gt;#&lt;/a&gt; 2. 技能实例管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为每个技能维护私有字段，并通过只读公共属性提供访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态加载附加在同一游戏对象上的技能组件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;初始化方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化方式&#34;&gt;#&lt;/a&gt; 初始化方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private void Start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dash = GetComponent&amp;lt;Dash_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clone = GetComponent&amp;lt;Clone_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sword = GetComponent&amp;lt;Sword_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blackhole = GetComponent&amp;lt;Blackhole_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    crystal = GetComponent&amp;lt;Crystal_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parry = GetComponent&amp;lt;Parry_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dodge = GetComponent&amp;lt;Dodge_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;GetComponent&amp;lt;T&amp;gt;()&lt;/code&gt;  获取以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Clone_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Blackhole_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Crystal_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Parry_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dodge_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;管理的技能字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理的技能字段&#34;&gt;#&lt;/a&gt; 管理的技能字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dash&lt;/code&gt; : 对应  &lt;code&gt;Dash_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone&lt;/code&gt; : 对应  &lt;code&gt;Clone_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sword&lt;/code&gt; : 对应  &lt;code&gt;Sword_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;blackhole&lt;/code&gt; : 对应  &lt;code&gt;Blackhole_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;crystal&lt;/code&gt; : 对应  &lt;code&gt;Crystal_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parry&lt;/code&gt; : 对应  &lt;code&gt;Parry_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dodge&lt;/code&gt; : 对应  &lt;code&gt;Dodge_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;系统角色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统角色&#34;&gt;#&lt;/a&gt; 系统角色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SkillManager&lt;/code&gt;  是所有技能相关操作的主要访问点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他游戏组件通过该管理器与技能交互，确保操作集中化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;各技能类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各技能类&#34;&gt;#&lt;/a&gt; 各技能类&lt;/h2&gt;
&lt;h3 id=&#34;1-sword_skill&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-sword_skill&#34;&gt;#&lt;/a&gt; 1. Sword_Skill&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;  是  &lt;code&gt;Skill&lt;/code&gt;  的派生类，专注于与剑相关的技能逻辑，包括多种剑类型及其相应的解锁和使用机制。&lt;/p&gt;
&lt;h4 id=&#34;主要特点-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点-3&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h4&gt;
&lt;h5 id=&#34;1-剑的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-剑的类型&#34;&gt;#&lt;/a&gt; 1. 剑的类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供 4 种剑类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular（普通）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounce（弹射）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pierce（穿刺）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spin（旋转）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同类型剑有独特的属性，如重力、弹射次数、旋转持续时间等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型定义&#34;&gt;#&lt;/a&gt; 类型定义：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; SwordType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Regular,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Bounce,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Pierce,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Spin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-解锁机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-解锁机制&#34;&gt;#&lt;/a&gt; 2. 解锁机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每种剑类型通过解锁按钮控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供以下方法来解锁对应剑类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockBounceSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockPierceSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockSpinSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockTimeStop()&lt;/code&gt; （时间停止被动技能）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockVulnurable()&lt;/code&gt; （脆弱被动技能）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;解锁逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解锁逻辑&#34;&gt;#&lt;/a&gt; 解锁逻辑：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UnlockSword&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordUnlockButton.unlocked)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        swordType = SwordType.Regular;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        swordUnlocked = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-辅助瞄准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-辅助瞄准&#34;&gt;#&lt;/a&gt; 3. 辅助瞄准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供瞄准点（Aim Dots）功能，显示剑的预计轨迹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;瞄准点的位置由抛物线计算决定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方式-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-6&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Vector2 &lt;span class=&#34;title&#34;&gt;AimDirection&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 playerPosition = player.transform.position;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 direction = mousePosition - playerPosition;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; direction;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-创建剑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-创建剑&#34;&gt;#&lt;/a&gt; 4. 创建剑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CreateSword()&lt;/code&gt;  方法用于生成剑，并根据当前剑类型配置剑的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每种剑类型调用对应的  &lt;code&gt;Setup&lt;/code&gt;  方法配置独特行为。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方式-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-7&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateSword&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建新的剑实例，并将其位置设置为玩家的位置，方向与当前物体一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        GameObject newSword = Instantiate(swordPrefab, player.transform.position, transform.rotation);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取新剑对象的 Sword_Skill_Controller 脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Sword_Skill_Controller newSwordScript = newSword.GetComponent&amp;lt;Sword_Skill_Controller&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据剑的类型设置对应的技能效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Bounce)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupBounce(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, bounceAmount, bounceSpeed); &lt;span class=&#34;comment&#34;&gt;// 设置反弹剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Pierce)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupPierce(pierceAmount); &lt;span class=&#34;comment&#34;&gt;// 设置穿刺剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Spin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupSpin(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, maxTravelDistance, spinDuration, hitCooldown); &lt;span class=&#34;comment&#34;&gt;// 设置旋转剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置通用剑属性，如方向、重力、玩家引用、冻结时间和返回速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newSwordScript.SetupSword(finalDir, swordGravity, player, freezeTimeDuration, returnSpeed);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将新创建的剑分配给玩家&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.AssignNewSword(newSword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 禁用某些点的显示（具体作用依赖于实现）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DotsActive(&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-其他功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-其他功能&#34;&gt;#&lt;/a&gt; 5. 其他功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间停止（Time Stop）和脆弱（Vulnerable）被动技能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解锁后会自动激活对应效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解锁状态检测&lt;/strong&gt;：在  &lt;code&gt;CheckUnlock()&lt;/code&gt;  方法中检查所有解锁按钮状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供与剑相关的技能逻辑和实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多种剑类型和扩展功能，如辅助瞄准和被动技能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与  &lt;code&gt;Skill&lt;/code&gt;  基类和  &lt;code&gt;SkillManager&lt;/code&gt;  交互，共享技能系统的框架。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-blackhole_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-blackhole_skillcs&#34;&gt;#&lt;/a&gt; 2. Blackhole_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现黑洞技能，生成黑洞并吸引敌人，同时支持黑洞的生长和收缩机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;黑洞的大小、持续时间、以及攻击次数可配置。&lt;/li&gt;
&lt;li&gt;可在特定状态下触发结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用  &lt;code&gt;SkillManager.instance&lt;/code&gt;  来播放音效或控制黑洞状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-clone_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-clone_skillcs&#34;&gt;#&lt;/a&gt; 3. Clone_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现召唤克隆体的技能，并支持多种克隆相关特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持攻击型克隆、侵略性克隆、多重克隆和水晶替代克隆。&lt;/li&gt;
&lt;li&gt;提供克隆生成的延迟机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Crystal_Skill&lt;/code&gt;  可以替代克隆生成。&lt;/li&gt;
&lt;li&gt;与其他技能（如  &lt;code&gt;Dash_Skill&lt;/code&gt;  和  &lt;code&gt;Dodge_Skill&lt;/code&gt; ）的特性协同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-crystal_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-crystal_skillcs&#34;&gt;#&lt;/a&gt; 4. Crystal_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现水晶技能，水晶可以作为防御机制，也支持爆炸和移动特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多层堆叠水晶的生成和使用。&lt;/li&gt;
&lt;li&gt;提供爆炸型和移动型水晶解锁机制。&lt;/li&gt;
&lt;li&gt;可与克隆技能互相替代。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;与  &lt;code&gt;Clone_Skill&lt;/code&gt;  协作实现水晶和克隆的互相替代功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-dash_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-dash_skillcs&#34;&gt;#&lt;/a&gt; 5. Dash_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现冲刺技能，支持冲刺时生成克隆体或抵达目标位置后生成克隆体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;可解锁冲刺克隆和到达克隆两种特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用  &lt;code&gt;Clone_Skill&lt;/code&gt;  来生成克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-dodge_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-dodge_skillcs&#34;&gt;#&lt;/a&gt; 6. Dodge_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现闪避技能，支持闪避镜像功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;提升闪避数值，并提供镜像闪避的解锁选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;Clone_Skill&lt;/code&gt;  生成镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-parry_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-parry_skillcs&#34;&gt;#&lt;/a&gt; 7. Parry_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现格挡技能，可恢复生命值或生成镜像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持恢复生命值的解锁选项。&lt;/li&gt;
&lt;li&gt;在成功格挡时触发镜像生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过  &lt;code&gt;Clone_Skill&lt;/code&gt;  实现镜像生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;文件之间的联系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件之间的联系&#34;&gt;#&lt;/a&gt; 文件之间的联系&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SkillManager.cs&lt;/strong&gt; 负责管理所有技能类，是各技能的单一入口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能之间的交互&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;多个技能通过  &lt;code&gt;SkillManager&lt;/code&gt;  调用其他技能实例。例如：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;  和  &lt;code&gt;Dodge_Skill&lt;/code&gt;  会调用  &lt;code&gt;Clone_Skill&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;  和  &lt;code&gt;Crystal_Skill&lt;/code&gt;  之间有能力互相替代。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大部分技能类使用基础类  &lt;code&gt;Skill.cs&lt;/code&gt;  提供的通用逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;如需进一步补充或优化，请告诉我！&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-18T03:47:49.086Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/17/game-engine/unity/unityProject01/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F01(Skill%20part)/</id>
        <title>技能系统01(Skill part)</title>
        <link rel="alternate" href="http://example.com/2025/01/17/game-engine/unity/unityProject01/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F01(Skill%20part)/"/>
        <content type="html">&lt;h1 id=&#34;skill-系统总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skill-系统总结&#34;&gt;#&lt;/a&gt; Skill 系统总结&lt;/h1&gt;
&lt;h2 id=&#34;skill&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skill&#34;&gt;#&lt;/a&gt; Skill&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Skill&lt;/code&gt;  类是所有技能类的基础类，提供通用的技能逻辑和方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;主要特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h3&gt;
&lt;h3 id=&#34;1-冷却机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-冷却机制&#34;&gt;#&lt;/a&gt; 1. 冷却机制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过  &lt;code&gt;cooldown&lt;/code&gt;  和  &lt;code&gt;cooldownTimer&lt;/code&gt;  属性管理技能的冷却时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每帧更新冷却计时器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cooldownTimer -= Time.deltaTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-技能使用逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-技能使用逻辑&#34;&gt;#&lt;/a&gt; 2. 技能使用逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供  &lt;code&gt;CanUseSkill()&lt;/code&gt;  方法检查技能是否可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果可以使用技能，则重置冷却时间并调用  &lt;code&gt;UseSkill()&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-2&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CanUseSkill&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cooldownTimer &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        UseSkill();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cooldownTimer = cooldown;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    player.fx.CreatePopUpText(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cooldown&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-解锁检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-解锁检测&#34;&gt;#&lt;/a&gt; 3. 解锁检测&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供  &lt;code&gt;CheckUnlock()&lt;/code&gt;  方法，用于子类实现具体的解锁逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在  &lt;code&gt;Start()&lt;/code&gt;  方法中调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-3&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    player = PlayerManager.instance.player;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CheckUnlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-最近敌人查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-最近敌人查找&#34;&gt;#&lt;/a&gt; 4. 最近敌人查找&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供  &lt;code&gt;FindClosestEnemy()&lt;/code&gt;  方法，用于查找指定范围内最近的敌人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-4&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; Transform &lt;span class=&#34;title&#34;&gt;FindClosestEnemy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Transform _checkTransform&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在指定的 Transform（_checkTransform）周围的半径为25的范围内查找所有的碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Collider2D[] colliders = Physics2D.OverlapCircleAll(_checkTransform.position, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化最近敌人的距离为正无穷大，以便找到最近的敌人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; closestDistance = Mathf.Infinity;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化最近敌人的 Transform 变量为 null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Transform closestEnemy = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历所有检测到的碰撞体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; hit &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; colliders)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 检查当前碰撞体是否附加了一个 Enemy 脚本（表示这是一个敌人）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hit.GetComponent&amp;lt;Enemy&amp;gt;() != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 计算 _checkTransform 到当前敌人的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; distanceToEnemy = Vector2.Distance(_checkTransform.position, hit.transform.position);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果当前敌人距离小于之前记录的最近距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (distanceToEnemy &amp;lt; closestDistance)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新最近的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                closestDistance = distanceToEnemy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 更新最近敌人的 Transform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                closestEnemy = hit.transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 返回最近敌人的 Transform（如果没有敌人，则返回 null）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; closestEnemy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;子类继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子类继承&#34;&gt;#&lt;/a&gt; 子类继承&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Skill&lt;/code&gt;  类提供了基础功能，供所有技能类继承和扩展。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Clone_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;子类可以重写以下方法以实现自定义逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Start()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Update()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UseSkill()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CheckUnlock()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;skillmanager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skillmanager&#34;&gt;#&lt;/a&gt; SkillManager&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SkillManager&lt;/code&gt;  类是技能系统的核心组件，负责初始化并提供对所有技能实例的全局访问。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;主要特点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点-2&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h3&gt;
&lt;h3 id=&#34;1-单例模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-单例模式&#34;&gt;#&lt;/a&gt; 1. 单例模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保  &lt;code&gt;SkillManager&lt;/code&gt;  全局仅有一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可通过静态属性  &lt;code&gt;instance&lt;/code&gt;  进行访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现方式-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-5&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private void Awake()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (instance != null)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Destroy(instance.gameObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instance = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果已有另一个实例，销毁当前游戏对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则，将当前对象设置为全局实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-技能实例管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-技能实例管理&#34;&gt;#&lt;/a&gt; 2. 技能实例管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为每个技能维护私有字段，并通过只读公共属性提供访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态加载附加在同一游戏对象上的技能组件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;初始化方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化方式&#34;&gt;#&lt;/a&gt; 初始化方式：&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;private void Start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dash = GetComponent&amp;lt;Dash_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clone = GetComponent&amp;lt;Clone_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sword = GetComponent&amp;lt;Sword_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    blackhole = GetComponent&amp;lt;Blackhole_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    crystal = GetComponent&amp;lt;Crystal_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parry = GetComponent&amp;lt;Parry_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dodge = GetComponent&amp;lt;Dodge_Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;GetComponent&amp;lt;T&amp;gt;()&lt;/code&gt;  获取以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Clone_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Blackhole_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Crystal_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Parry_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dodge_Skill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;管理的技能字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理的技能字段&#34;&gt;#&lt;/a&gt; 管理的技能字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dash&lt;/code&gt; : 对应  &lt;code&gt;Dash_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone&lt;/code&gt; : 对应  &lt;code&gt;Clone_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sword&lt;/code&gt; : 对应  &lt;code&gt;Sword_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;blackhole&lt;/code&gt; : 对应  &lt;code&gt;Blackhole_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;crystal&lt;/code&gt; : 对应  &lt;code&gt;Crystal_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parry&lt;/code&gt; : 对应  &lt;code&gt;Parry_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dodge&lt;/code&gt; : 对应  &lt;code&gt;Dodge_Skill&lt;/code&gt;  实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;系统角色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统角色&#34;&gt;#&lt;/a&gt; 系统角色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SkillManager&lt;/code&gt;  是所有技能相关操作的主要访问点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他游戏组件通过该管理器与技能交互，确保操作集中化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;各技能类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各技能类&#34;&gt;#&lt;/a&gt; 各技能类&lt;/h2&gt;
&lt;h3 id=&#34;1-sword_skill&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-sword_skill&#34;&gt;#&lt;/a&gt; 1. Sword_Skill&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;  是  &lt;code&gt;Skill&lt;/code&gt;  的派生类，专注于与剑相关的技能逻辑，包括多种剑类型及其相应的解锁和使用机制。&lt;/p&gt;
&lt;h4 id=&#34;主要特点-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点-3&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h4&gt;
&lt;h5 id=&#34;1-剑的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-剑的类型&#34;&gt;#&lt;/a&gt; 1. 剑的类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供 4 种剑类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular（普通）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounce（弹射）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pierce（穿刺）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spin（旋转）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同类型剑有独特的属性，如重力、弹射次数、旋转持续时间等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型定义&#34;&gt;#&lt;/a&gt; 类型定义：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enum&lt;/span&gt; SwordType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Regular,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Bounce,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Pierce,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Spin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-解锁机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-解锁机制&#34;&gt;#&lt;/a&gt; 2. 解锁机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每种剑类型通过解锁按钮控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供以下方法来解锁对应剑类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockBounceSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockPierceSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockSpinSword()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockTimeStop()&lt;/code&gt; （时间停止被动技能）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnlockVulnurable()&lt;/code&gt; （脆弱被动技能）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;解锁逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解锁逻辑&#34;&gt;#&lt;/a&gt; 解锁逻辑：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UnlockSword&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordUnlockButton.unlocked)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        swordType = SwordType.Regular;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        swordUnlocked = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-辅助瞄准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-辅助瞄准&#34;&gt;#&lt;/a&gt; 3. 辅助瞄准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供瞄准点（Aim Dots）功能，显示剑的预计轨迹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;瞄准点的位置由抛物线计算决定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方式-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-6&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Vector2 &lt;span class=&#34;title&#34;&gt;AimDirection&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 playerPosition = player.transform.position;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector2 direction = mousePosition - playerPosition;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; direction;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-创建剑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-创建剑&#34;&gt;#&lt;/a&gt; 4. 创建剑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CreateSword()&lt;/code&gt;  方法用于生成剑，并根据当前剑类型配置剑的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每种剑类型调用对应的  &lt;code&gt;Setup&lt;/code&gt;  方法配置独特行为。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方式-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方式-7&#34;&gt;#&lt;/a&gt; 实现方式：&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateSword&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建新的剑实例，并将其位置设置为玩家的位置，方向与当前物体一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        GameObject newSword = Instantiate(swordPrefab, player.transform.position, transform.rotation);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取新剑对象的 Sword_Skill_Controller 脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Sword_Skill_Controller newSwordScript = newSword.GetComponent&amp;lt;Sword_Skill_Controller&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 根据剑的类型设置对应的技能效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Bounce)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupBounce(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, bounceAmount, bounceSpeed); &lt;span class=&#34;comment&#34;&gt;// 设置反弹剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Pierce)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupPierce(pierceAmount); &lt;span class=&#34;comment&#34;&gt;// 设置穿刺剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (swordType == SwordType.Spin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            newSwordScript.SetupSpin(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, maxTravelDistance, spinDuration, hitCooldown); &lt;span class=&#34;comment&#34;&gt;// 设置旋转剑效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置通用剑属性，如方向、重力、玩家引用、冻结时间和返回速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newSwordScript.SetupSword(finalDir, swordGravity, player, freezeTimeDuration, returnSpeed);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将新创建的剑分配给玩家&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.AssignNewSword(newSword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 禁用某些点的显示（具体作用依赖于实现）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        DotsActive(&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-其他功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-其他功能&#34;&gt;#&lt;/a&gt; 5. 其他功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间停止（Time Stop）和脆弱（Vulnerable）被动技能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解锁后会自动激活对应效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解锁状态检测&lt;/strong&gt;：在  &lt;code&gt;CheckUnlock()&lt;/code&gt;  方法中检查所有解锁按钮状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供与剑相关的技能逻辑和实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多种剑类型和扩展功能，如辅助瞄准和被动技能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与  &lt;code&gt;Skill&lt;/code&gt;  基类和  &lt;code&gt;SkillManager&lt;/code&gt;  交互，共享技能系统的框架。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-blackhole_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-blackhole_skillcs&#34;&gt;#&lt;/a&gt; 2. Blackhole_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现黑洞技能，生成黑洞并吸引敌人，同时支持黑洞的生长和收缩机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;黑洞的大小、持续时间、以及攻击次数可配置。&lt;/li&gt;
&lt;li&gt;可在特定状态下触发结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用  &lt;code&gt;SkillManager.instance&lt;/code&gt;  来播放音效或控制黑洞状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-clone_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-clone_skillcs&#34;&gt;#&lt;/a&gt; 3. Clone_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现召唤克隆体的技能，并支持多种克隆相关特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持攻击型克隆、侵略性克隆、多重克隆和水晶替代克隆。&lt;/li&gt;
&lt;li&gt;提供克隆生成的延迟机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Crystal_Skill&lt;/code&gt;  可以替代克隆生成。&lt;/li&gt;
&lt;li&gt;与其他技能（如  &lt;code&gt;Dash_Skill&lt;/code&gt;  和  &lt;code&gt;Dodge_Skill&lt;/code&gt; ）的特性协同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-crystal_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-crystal_skillcs&#34;&gt;#&lt;/a&gt; 4. Crystal_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现水晶技能，水晶可以作为防御机制，也支持爆炸和移动特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多层堆叠水晶的生成和使用。&lt;/li&gt;
&lt;li&gt;提供爆炸型和移动型水晶解锁机制。&lt;/li&gt;
&lt;li&gt;可与克隆技能互相替代。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;与  &lt;code&gt;Clone_Skill&lt;/code&gt;  协作实现水晶和克隆的互相替代功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-dash_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-dash_skillcs&#34;&gt;#&lt;/a&gt; 5. Dash_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现冲刺技能，支持冲刺时生成克隆体或抵达目标位置后生成克隆体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;可解锁冲刺克隆和到达克隆两种特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用  &lt;code&gt;Clone_Skill&lt;/code&gt;  来生成克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-dodge_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-dodge_skillcs&#34;&gt;#&lt;/a&gt; 6. Dodge_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现闪避技能，支持闪避镜像功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;提升闪避数值，并提供镜像闪避的解锁选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;Clone_Skill&lt;/code&gt;  生成镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-parry_skillcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-parry_skillcs&#34;&gt;#&lt;/a&gt; 7. Parry_Skill.cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：实现格挡技能，可恢复生命值或生成镜像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持恢复生命值的解锁选项。&lt;/li&gt;
&lt;li&gt;在成功格挡时触发镜像生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能关联&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过  &lt;code&gt;Clone_Skill&lt;/code&gt;  实现镜像生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;文件之间的联系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件之间的联系&#34;&gt;#&lt;/a&gt; 文件之间的联系&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SkillManager.cs&lt;/strong&gt; 负责管理所有技能类，是各技能的单一入口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技能之间的交互&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;多个技能通过  &lt;code&gt;SkillManager&lt;/code&gt;  调用其他技能实例。例如：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dash_Skill&lt;/code&gt;  和  &lt;code&gt;Dodge_Skill&lt;/code&gt;  会调用  &lt;code&gt;Clone_Skill&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sword_Skill&lt;/code&gt;  和  &lt;code&gt;Crystal_Skill&lt;/code&gt;  之间有能力互相替代。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大部分技能类使用基础类  &lt;code&gt;Skill.cs&lt;/code&gt;  提供的通用逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;如需进一步补充或优化，请告诉我！&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2025-01-17T12:09:40.699Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2025/01/03/game-engine/unity/unityBasics/%E5%B0%8F%E6%B1%BD%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93(1)/</id>
        <title>小汽车项目总结(1)</title>
        <link rel="alternate" href="http://example.com/2025/01/03/game-engine/unity/unityBasics/%E5%B0%8F%E6%B1%BD%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93(1)/"/>
        <content type="html">&lt;h2 id=&#34;一-生成世界随机地图模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-生成世界随机地图模块&#34;&gt;#&lt;/a&gt; 一、生成世界随机地图模块&lt;/h2&gt;
&lt;h3 id=&#34;1-mathfperlinnoise源码推测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-mathfperlinnoise源码推测&#34;&gt;#&lt;/a&gt; 1. Mathf.PerlinNoise 源码推测&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PerlinNoise&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; x, &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; y&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; xi = Mathf.FloorToInt(x) &amp;amp; &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; yi = Mathf.FloorToInt(y) &amp;amp; &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; xf = x - Mathf.Floor(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; yf = y - Mathf.Floor(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; u = Fade(xf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; v = Fade(yf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; aa = Permutation[Permutation[xi] + yi];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; ab = Permutation[Permutation[xi] + yi + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; ba = Permutation[Permutation[xi + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + yi];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; bb = Permutation[Permutation[xi + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + yi + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; x1, x2, y1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x1 = Mathf.Lerp(Grad(aa, xf, yf), Grad(ba, xf - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, yf), u);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x2 = Mathf.Lerp(Grad(ab, xf, yf - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), Grad(bb, xf - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, yf - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), u);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y1 = Mathf.Lerp(x1, x2, v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (y1 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;0.5f&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 将结果映射到 [0, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fade&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t * t * t * (t * (t * &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Grad&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; hash, &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; x, &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; y&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; h = hash &amp;amp; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; u = h &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ? x : y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; v = h &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ? y : x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ((h &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? u : -u) + ((h &amp;amp; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? v : -v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一个常见的伪随机排列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] Permutation = &amp;#123; ... &amp;#125;; &lt;span class=&#34;comment&#34;&gt;// 省略完整表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2各个方法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2各个方法分析&#34;&gt;#&lt;/a&gt; 2. 各个方法分析&lt;/h3&gt;
&lt;h4 id=&#34;21世界片段的生成与管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21世界片段的生成与管理&#34;&gt;#&lt;/a&gt; 2.1 世界片段的生成与管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;创建世界片段（圆柱体&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GenerateWorldPiece&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 创建新的圆柱体，并将其存储在 pieces 数组中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[i] = CreateCylinder(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 根据索引设置片段的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[i].transform.Translate(Vector3.forward * (dimensions.y * scale * Mathf.PI) * i); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 更新片段，使其包含终点并能够移动 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	UpdateSinglePiece(pieces[i]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;创建圆柱形片段&lt;br&gt;
&lt;strong&gt;模块： &lt;code&gt;CreateCylinder&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;创建一个圆柱形的世界片段，添加必要的组件（ &lt;code&gt;MeshFilter&lt;/code&gt; 、 &lt;code&gt;MeshRenderer&lt;/code&gt; 、 &lt;code&gt;MeshCollider&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;为圆柱体生成网格形状并赋予材质。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要方法&lt;/strong&gt;：&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; GameObject &lt;span class=&#34;title&#34;&gt;CreateCylinder&lt;/span&gt;()&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 创建新的圆柱体并命名 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	GameObject newCylinder = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; GameObject(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	newCylinder.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;World piece&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 设置当前圆柱体为新创建的对象 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	currentCylinder = newCylinder; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 添加 MeshFilter 和 MeshRenderer 组件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	MeshFilter meshFilter = newCylinder.AddComponent&amp;lt;MeshFilter&amp;gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	MeshRenderer meshRenderer = newCylinder.AddComponent&amp;lt;MeshRenderer&amp;gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 为圆柱体设置材质 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	meshRenderer.material = meshMaterial; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 生成网格并赋值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	meshFilter.mesh = Generate(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 为圆柱体添加匹配网格的碰撞器 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	newCylinder.AddComponent&amp;lt;MeshCollider&amp;gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; newCylinder; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;为圆柱体生成实际网格并返回&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;为圆柱体生成实际的网格。&lt;/li&gt;
&lt;li&gt;定义顶点、UV 坐标、三角形索引，构建一个 3D 几何体。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;CreateShape&lt;/code&gt;  完成网格顶点和形状的定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要方法&lt;/strong&gt;：&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Mesh &lt;span class=&#34;title&#34;&gt;Generate&lt;/span&gt;()&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 创建并命名新网格 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Mesh mesh = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Mesh(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mesh.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;MESH&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 初始化顶点、UV和三角形数组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Vector3[] vertices = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Vector2[] uvs = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] triangles = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 填充网格数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CreateShape(&lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; vertices, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; uvs, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; triangles); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 为网格设置顶点、UV和三角形 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mesh.vertices = vertices; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mesh.uv = uvs; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mesh.triangles = triangles; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 重新计算法线 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mesh.RecalculateNormals(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mesh; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;计算顶点位置并基于柏林噪声修改高度&lt;br&gt;
&lt;strong&gt;模块： &lt;code&gt;CreateShape&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算圆柱体的每个顶点位置，并基于 Perlin 噪声修改高度。&lt;/li&gt;
&lt;li&gt;处理世界片段之间的平滑过渡，确保多个片段连接时没有明显的断裂。&lt;/li&gt;
&lt;li&gt;根据顶点生成网格的 UV 坐标和三角形。&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateShape&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; Vector3[] vertices, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; Vector2[] uvs, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] triangles&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取当前片段在x轴和z轴的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; xCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimensions.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; zCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimensions.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化顶点数组和UV数组，根据片段的维度大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vertices = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    uvs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 当前顶点索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取圆柱体的半径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; radius = xCount * scale * &lt;span class=&#34;number&#34;&gt;0.5f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 嵌套循环遍历x轴和z轴上的所有顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt;= xCount; x++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt;= zCount; z++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 计算顶点在圆柱上的角度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; angle = x * Mathf.PI * &lt;span class=&#34;number&#34;&gt;2f&lt;/span&gt; / xCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 使用角度的余弦和正弦值确定顶点位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vertices[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(Mathf.Cos(angle) * radius, Mathf.Sin(angle) * radius, z * scale * Mathf.PI);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 更新UV坐标，用于纹理映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            uvs[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(x * scale, z * scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 根据Perlin噪声缩放和偏移值，计算用于噪声的x和z值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pX = (vertices[index].x * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pZ = (vertices[index].z * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 获取圆柱的中心位置，但保持z值不变，用于指向中心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Vector3 center = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, vertices[index].z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 根据Perlin噪声值和波浪高度，调整顶点向圆柱中心的移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vertices[index] += (center - vertices[index]).normalized * Mathf.PerlinNoise(pX, pZ) * waveHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 以下部分处理片段之间的平滑过渡：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 检查是否有起始点（beginPoints）并且当前顶点位于网格的起始部分（z越小越靠近片段开头）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(z &amp;lt; startTransitionLength &amp;amp;&amp;amp; beginPoints[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] != Vector3.zero)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 计算当前顶点的Perlin噪声占比，越靠近新片段，噪声占比越高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; perlinPercentage = z * (&lt;span class=&#34;number&#34;&gt;1f&lt;/span&gt; / startTransitionLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 从起始点获取对应的顶点，但保持z值为当前顶点的z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Vector3 beginPoint = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(beginPoints[x].x, beginPoints[x].y, vertices[index].z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 将起始点和当前顶点通过线性插值结合，实现片段之间的平滑过渡&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] = (perlinPercentage * vertices[index]) + ((&lt;span class=&#34;number&#34;&gt;1f&lt;/span&gt; - perlinPercentage) * beginPoint);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(z == zCount)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果当前顶点是最后一行顶点，更新起始点（beginPoints），以便下一个片段平滑连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                beginPoints[x] = vertices[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 随机在网格顶点位置生成物品（如障碍物或门）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, startObstacleChance) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !(gate == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; obstacles.Length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                CreateItem(vertices[index], x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 增加当前顶点索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化三角形数组（每个小方块由2个三角形组成，每个三角形由3个顶点组成，所以每个方块有6个顶点）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    triangles = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[xCount * zCount * &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 用于构建方块的顶点索引基础&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] boxBase = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; current = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 当前三角形数组的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历x轴上的所有位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; xCount; x++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建一个基础，用于填充当前x位置的一行方块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        boxBase = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[]&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历z轴上的所有位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt; zCount; z++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 增加基础顶点索引，移动到下一个方块的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                boxBase[i] = boxBase[i] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 为当前方块添加两个三角形的顶点索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;; j++)&amp;#123;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[current + j] = boxBase[j] - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 增加当前三角形数组的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            current += &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-过渡-片段之间更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-过渡-片段之间更新&#34;&gt;#&lt;/a&gt; 2.2 过渡 片段之间更新&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;使连接更加丝滑&lt;br&gt;
&lt;strong&gt;模块： &lt;code&gt;UpdateWorldPieces&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移除不再显示的旧片段。&lt;/li&gt;
&lt;li&gt;创建新的片段，衔接在当前场景的末端。&lt;/li&gt;
&lt;li&gt;保证两个片段的边界平滑连接。&lt;/li&gt;
&lt;li&gt;动态调整场景片段，形成 “无限滚动” 的效果。&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;IEnumerator &lt;span class=&#34;title&#34;&gt;UpdateWorldPieces&lt;/span&gt;()&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 移除第一个片段（不再可见） &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Destroy(pieces[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 将第二个片段赋值为第一个片段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = pieces[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 创建新的第二个片段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = CreateCylinder(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 设置新片段的位置和旋转，保证与前一个片段衔接 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].transform.position = pieces[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].transform.position + Vector3.forward * (dimensions.y * scale * Mathf.PI); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pieces[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].transform.rotation = pieces[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].transform.rotation; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 更新新生成的片段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	UpdateSinglePiece(pieces[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 等待一帧 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-动态调整模块场景中的物品管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-动态调整模块场景中的物品管理&#34;&gt;#&lt;/a&gt; 2.3 动态调整模块：场景中的物品管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;模块： &lt;code&gt;UpdateAllItems&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到所有带有标签 &lt;code&gt;Item&lt;/code&gt;  的物品（如障碍物和门）。&lt;/li&gt;
&lt;li&gt;判断物品是否接近玩家，若接近则显示物品。&lt;/li&gt;
&lt;li&gt;对底部的物品开启阴影投射，上部物品则关闭阴影，避免不必要的阴影绘制。&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateAllItems&lt;/span&gt;()&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 查找所有带有 &amp;quot;Item&amp;quot; 标签的物体 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	GameObject[] items = GameObject.FindGameObjectsWithTag(&lt;span class=&#34;string&#34;&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 遍历所有物品 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; items.Length; i++)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 获取物品的所有 MeshRenderer 组件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt;(MeshRenderer renderer &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; items[i].GetComponentsInChildren&amp;lt;MeshRenderer&amp;gt;())&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 判断物品是否足够接近玩家 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; show = items[i].transform.position.z &amp;lt; showItemDistance; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 如果需要显示物品，更新阴影投射模式 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 圆柱体世界中，仅底部的物体需要投射阴影 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(show) renderer.shadowCastingMode = (items[i].transform.position.y &amp;lt; shadowHeight) ? ShadowCastingMode.On : ShadowCastingMode.Off; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 根据是否展示物品启用或禁用 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			Renderer renderer.enabled = show; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;模块： &lt;code&gt;CreateItem&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据随机概率在片段上生成物品（障碍物或门）。&lt;/li&gt;
&lt;li&gt;将物品位置设置在网格的某些顶点处。&lt;/li&gt;
&lt;li&gt;确保物品的朝向正确，使其面向圆柱体中心。&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Vector3 vert, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 获取圆柱体的中心位置，但保持z值与顶点的z值一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector3 zCenter = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, vert.z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查中心点与顶点之间是否有正确的角度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 如果向量为零或顶点位于圆柱体的四分之一或四分之三处（特定位置），则不生成物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(zCenter - vert == Vector3.zero || x == (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimensions.x / &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; || x == (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimensions.x / &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据随机概率生成新物品，有小概率生成门（gate），大概率生成障碍物&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GameObject newItem = Instantiate((Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, gateChance) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) ? gate : obstacles[Random.Range(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, obstacles.Length)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将物品朝向圆柱体中心方向旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    newItem.transform.rotation = Quaternion.LookRotation(zCenter - vert, Vector3.up);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置物品的位置为当前顶点位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    newItem.transform.position = vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将新生成的物品设置为当前圆柱体的子物体，以便随圆柱体一起移动和旋转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    newItem.transform.SetParent(currentCylinder.transform, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;24-场景控制模块片段的移动与过渡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-场景控制模块片段的移动与过渡&#34;&gt;#&lt;/a&gt; 2.4 场景控制模块：片段的移动与过渡&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;模块： &lt;code&gt;UpdateSinglePiece&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为片段添加移动功能，使其沿 &lt;code&gt;z&lt;/code&gt;  轴向玩家方向移动。&lt;/li&gt;
&lt;li&gt;根据灯光的旋转速度设置片段的旋转速度。&lt;/li&gt;
&lt;li&gt;更新 Perlin 噪声的偏移量，确保每个片段的地形独特。&lt;/li&gt;
&lt;li&gt;动态调整障碍物的出现概率，增加游戏难度。&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateSinglePiece&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;GameObject piece&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 为新生成的片段添加基础移动脚本，使其向玩家方向移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BasicMovement movement = piece.AddComponent&amp;lt;BasicMovement&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置移动速度为全局速度的负值（向玩家方向移动）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    movement.movespeed = -globalSpeed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 如果灯光（Directional Light）有移动脚本，则设置片段的旋转速度与灯光的旋转速度一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(lampMovement != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        movement.rotateSpeed = lampMovement.rotateSpeed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 为当前片段创建一个终点对象，用于标记片段的末尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GameObject endPoint = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; GameObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置终点的位置为片段当前位置加上z轴方向的偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    endPoint.transform.position = piece.transform.position + Vector3.forward * (dimensions.y * scale * Mathf.PI);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 将终点设置为当前片段的子物体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    endPoint.transform.parent = piece.transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 为终点命名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    endPoint.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;End Point&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 增加Perlin噪声的偏移量，确保每个片段的地形形状不同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    offset += randomness;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 减小障碍物生成的概率，随着时间推移增加障碍物的密度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(startObstacleChance &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        startObstacleChance -= obstacleChanceAcceleration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3一些理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3一些理解&#34;&gt;#&lt;/a&gt; 3. 一些理解&lt;/h3&gt;
&lt;p&gt;实现方案：地图为两个圆柱体进行嵌套，使整个场景达成了一种伪无限的效果，并且由于柏林噪声的平滑随机性，使圆柱体中的地形会有一些波动。所以在一开始创建了顶点、uv 三角形的数组后通过计算角度将数值注入数组，并通过柏林噪声以及传入值 waveHeight 波动圆柱体表面的数组值以达成总体圆柱体但是细节有坡度的效果。&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="unity基础" scheme="http://example.com/categories/game-engine/unity/unityBasics/" />
        <updated>2025-01-03T07:15:07.057Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/12/16/computer/dataStructure/hello-world/</id>
        <title>算法基础总结</title>
        <link rel="alternate" href="http://example.com/2024/12/16/computer/dataStructure/hello-world/"/>
        <content type="html">&lt;h2 id=&#34;排序类题目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序类题目&#34;&gt;#&lt;/a&gt; 排序类题目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以用迭代和递归来做&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="数据结构" scheme="http://example.com/categories/computer/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2024-12-16T11:54:49.158Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/11/10/game-engine/unity/unityBasics/%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F/</id>
        <title>摄像机跟随</title>
        <link rel="alternate" href="http://example.com/2024/11/10/game-engine/unity/unityBasics/%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E9%9A%8F/"/>
        <content type="html">&lt;p&gt;代码&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LateUpdate&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 检查是否有目标对象（camTarget）可供跟随&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (camTarget == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 若 camTarget 为空，停止执行，以防止空引用错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取摄像机当前的水平旋转角度（绕Y轴）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; currentRotationAngle = transform.eulerAngles.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取目标对象的水平旋转角度（绕Y轴）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; wantedRotationAngle = camTarget.eulerAngles.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 计算目标对象的期望高度，即目标对象的Y坐标加上预设的高度偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; wantedHeight = camTarget.position.y + height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取摄像机当前的高度（Y坐标）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; currentHeight = transform.position.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 平滑过渡摄像机的当前旋转角度，使其逐渐接近目标旋转角度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        currentRotationAngle = Mathf.LerpAngle(currentRotationAngle, wantedRotationAngle, rotationDamping * Time.deltaTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 平滑过渡摄像机的高度，使其逐渐接近目标高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        currentHeight = Mathf.Lerp(currentHeight, wantedHeight, heightDamping * Time.deltaTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 创建一个绕Y轴旋转currentRotationAngle度的旋转，表示摄像机当前的旋转方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Quaternion currentRotation = Quaternion.Euler(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, currentRotationAngle, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置摄像机的位置为目标对象的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.position = camTarget.position;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 在目标位置的基础上，沿当前旋转的后方方向（Vector3.forward的负方向）拉远一定距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.position -= currentRotation * Vector3.forward * distance;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 重置摄像机的高度，使其为计算得到的currentHeight&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.position = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(transform.position.x, currentHeight, transform.position.z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将摄像机朝向目标对象，使其始终面向目标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.LookAt(camTarget);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 通常首选在  &lt;code&gt;LateUpdate&lt;/code&gt;  而不是  &lt;code&gt;Update&lt;/code&gt;  中使用此函数，因为  &lt;code&gt;LateUpdate&lt;/code&gt;  在帧中的所有  &lt;code&gt;Update&lt;/code&gt;  调用之后运行。以下是它对相机跟随功能产生影响的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确保摄像机位置一致&lt;/strong&gt;： &lt;code&gt;LateUpdate&lt;/code&gt;  确保在所有其他游戏对象（如目标）完成帧的移动或更新后，调整摄像机的位置和旋转。这一点很重要，因为如果在  &lt;code&gt;Update&lt;/code&gt;  期间目标的位置或旋转发生变化，并且您也在  &lt;code&gt;Update&lt;/code&gt;  中移动摄像机，则可能会出现轻微的滞后或抖动，因为摄像机可能并不总是与最新的目标位置同步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消除抖动和滞后&lt;/strong&gt;：通过使用  &lt;code&gt;LateUpdate&lt;/code&gt; ，您可以确保在摄像机移动之前考虑目标位置或旋转的任何变化。这使得相机可以平滑、精确地跟随，而不会出现抖动或滞后一帧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化摄像机逻辑&lt;/strong&gt;：在其他更新完成后移动摄像机有助于优化渲染管道。摄像机只需根据对象的最终位置定位自身，这可确保摄像机在帧结束时渲染的内容是准确和最新的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="unity基础" scheme="http://example.com/categories/game-engine/unity/unityBasics/" />
        <updated>2024-11-10T00:38:50.999Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/11/07/game-engine/unity/unityBasics/Mesh%E7%9A%84%E4%BD%BF%E7%94%A8%20%E6%B1%BD%E8%BD%A6%E5%9C%B0%E5%BD%A2%E5%88%9B%E5%BB%BA/</id>
        <title>Mesh的使用 汽车地形创建</title>
        <link rel="alternate" href="http://example.com/2024/11/07/game-engine/unity/unityBasics/Mesh%E7%9A%84%E4%BD%BF%E7%94%A8%20%E6%B1%BD%E8%BD%A6%E5%9C%B0%E5%BD%A2%E5%88%9B%E5%BB%BA/"/>
        <content type="html">&lt;h3 id=&#34;1-基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-基本概念&#34;&gt;#&lt;/a&gt; 1. 基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MeshFilter&lt;/strong&gt;：负责存储 Mesh 数据。它将 Mesh（包含顶点、边、面等几何数据）赋予对象，使其具有形状。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MeshRenderer&lt;/strong&gt;：负责渲染 Mesh。它使用材质（Material）对 Mesh 进行渲染，使其在场景中可见。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MeshCollider&lt;/strong&gt;：一种碰撞器组件，允许物体根据 Mesh 形状进行碰撞检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-mesh-的基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-mesh-的基本结构&#34;&gt;#&lt;/a&gt; 2. Mesh 的基本结构&lt;/h3&gt;
&lt;p&gt;Mesh 通常由以下元素组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顶点（Vertices）&lt;/strong&gt;：Mesh 的基本组成单位，一个顶点就是一个 3D 空间中的点。Mesh 的形状通过连接这些顶点来定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三角形（Triangles）&lt;/strong&gt;：由顶点组成的面，用于定义 Mesh 的表面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法线（Normals）&lt;/strong&gt;：用于定义每个顶点的方向，影响光照效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UV 坐标（UV Coordinates）&lt;/strong&gt;：用于将纹理贴图应用到 Mesh 上，定义了每个顶点在纹理图上的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3创建mesh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3创建mesh&#34;&gt;#&lt;/a&gt; 3. 创建 Mesh&lt;/h3&gt;
&lt;h4 id=&#34;1-顶点-vertices&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-顶点-vertices&#34;&gt;#&lt;/a&gt; 1. 顶点 (Vertices)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;顶点&lt;/strong&gt;是 3D 空间中的一个点，是构成 3D 模型的基本单元。一个 3D 模型的形状是由多个顶点和顶点之间的连接方式决定的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表示方式&lt;/strong&gt;：在 Unity 中，顶点通常用  &lt;code&gt;Vector3&lt;/code&gt;  表示，包括  &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt;  和  &lt;code&gt;z&lt;/code&gt;  坐标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：顶点的集合决定了物体的形状，通过连接顶点可以形成边和面。顶点位置的改变会直接影响模型的形状。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：一个简单的正方形平面可以由 4 个顶点定义，如  &lt;code&gt;[(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0)]&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-三角形-triangles&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-三角形-triangles&#34;&gt;#&lt;/a&gt; 2. 三角形 (Triangles)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;三角形&lt;/strong&gt;是由三个顶点构成的一个平面，是 3D 模型的基本面。所有复杂的 3D 模型都是由大量三角形组合而成的，因为三角形是最简单的平面，可以稳定地定义在 3D 空间中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表示方式&lt;/strong&gt;：在 Unity 中，三角形通过一个顶点索引数组来定义。例如， &lt;code&gt;[0, 1, 2]&lt;/code&gt;  表示使用第 0、1、2 个顶点构成一个三角形。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：三角形是 Mesh 的渲染基础。Unity 会根据三角形数据来生成物体的表面，并在这些表面上应用纹理和光照。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：一个由 4 个顶点组成的正方形平面需要用 2 个三角形表示，如  &lt;code&gt;[(0, 1, 2), (0, 2, 3)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-法线-normals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-法线-normals&#34;&gt;#&lt;/a&gt; 3. 法线 (Normals)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;法线&lt;/strong&gt;是一个垂直于三角形或顶点表面的向量，用于定义表面朝向。它影响模型如何与光源交互，从而影响视觉效果，如阴影和高光。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表示方式&lt;/strong&gt;：在 Unity 中，法线通常用  &lt;code&gt;Vector3&lt;/code&gt;  表示，包括  &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt;  和  &lt;code&gt;z&lt;/code&gt;  坐标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：法线决定了光照如何应用在模型表面。正确的法线可以让光照看起来更自然，模型更有立体感。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：如果一个平面在 X-Z 平面上，法线通常会指向 Y 轴正方向  &lt;code&gt;(0, 1, 0)&lt;/code&gt; ，表示平面朝上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-uv-坐标-uv-coordinates&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-uv-坐标-uv-coordinates&#34;&gt;#&lt;/a&gt; 4. UV 坐标 (UV Coordinates)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;UV 坐标&lt;/strong&gt;用于将 2D 纹理贴图映射到 3D 模型的表面。UV 坐标定义了模型表面上每个顶点在纹理图上的位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表示方式&lt;/strong&gt;：UV 坐标通常用  &lt;code&gt;Vector2&lt;/code&gt;  表示，包括  &lt;code&gt;U&lt;/code&gt;  和  &lt;code&gt;V&lt;/code&gt;  分量，范围为  &lt;code&gt;[0, 1]&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt;  表示纹理的水平坐标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt;  表示纹理的垂直坐标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：UV 坐标控制了纹理在模型表面的显示方式。通过调整 UV 坐标，可以改变纹理的平铺、缩放和对齐方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：一个简单的正方形平面的 UV 坐标可能是  &lt;code&gt;[(0, 0), (1, 0), (1, 1), (0, 1)]&lt;/code&gt; ，表示将整个纹理贴图到平面上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例在-unity-中创建一个简单的-mesh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例在-unity-中创建一个简单的-mesh&#34;&gt;#&lt;/a&gt; 示例：在 Unity 中创建一个简单的 Mesh&lt;/h4&gt;
&lt;p&gt;假设我们要创建一个 1x1 的正方形平面，以下是顶点、三角形、法线和 UV 的示例：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mesh mesh = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Mesh();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义 4 个顶点，组成正方形的四个角&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Vector3[] vertices = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 顶点 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义 2 个三角形，使 4 个顶点形成一个平面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] triangles = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,  &lt;span class=&#34;comment&#34;&gt;// 三角形 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;// 三角形 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义每个顶点的法线，表示该平面朝向 Z 轴正方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Vector3[] normals = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 0 的法线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 1 的法线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 2 的法线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 顶点 3 的法线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义每个顶点的 UV 坐标，使纹理完全覆盖整个平面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Vector2[] uv = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 0 的 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 1 的 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),  &lt;span class=&#34;comment&#34;&gt;// 顶点 2 的 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 顶点 3 的 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 设置 Mesh 的顶点、三角形、法线和 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mesh.vertices = vertices;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mesh.triangles = triangles;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mesh.normals = normals;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mesh.uv = uv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-动态生成和修改-mesh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-动态生成和修改-mesh&#34;&gt;#&lt;/a&gt; 4. 动态生成和修改 Mesh&lt;/h3&gt;
&lt;p&gt;在游戏过程中，可以动态修改 Mesh 数据。例如，改变顶点的位置可以让 Mesh 变形。以下是如何动态修改 Mesh 顶点位置的示例：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Mesh mesh = GetComponent&amp;lt;MeshFilter&amp;gt;().mesh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Vector3[] vertices = mesh.vertices;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 修改每个顶点的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; vertices.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vertices[i].y = Mathf.Sin(Time.time + i); &lt;span class=&#34;comment&#34;&gt;// 根据时间生成动态效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mesh.vertices = vertices;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mesh.RecalculateNormals(); &lt;span class=&#34;comment&#34;&gt;// 更新法线以影响光照&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-mesh-的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-mesh-的应用&#34;&gt;#&lt;/a&gt; 5. Mesh 的应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地形生成&lt;/strong&gt;：可以通过 Perlin Noise 或其他算法生成地形。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;角色建模和动画&lt;/strong&gt;：Mesh 可以应用于角色建模，还可以通过骨骼动画（Skinned Mesh）进行变形。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;破碎效果&lt;/strong&gt;：通过分割 Mesh，可以实现物体破碎的视觉效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态水面&lt;/strong&gt;：修改 Mesh 顶点可以实现水面波动的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-注意事项&#34;&gt;#&lt;/a&gt; 6. 注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：修改 Mesh 可能影响性能，尤其是复杂的 Mesh 或频繁更新的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;法线和 UV&lt;/strong&gt;：需要正确设置法线和 UV，确保光照和纹理显示正常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recalculate&lt;/strong&gt;：修改 Mesh 后需要调用  &lt;code&gt;RecalculateNormals&lt;/code&gt;  和  &lt;code&gt;RecalculateBounds&lt;/code&gt;  等方法来更新法线和边界框。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整示例代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整示例代码&#34;&gt;#&lt;/a&gt; 完整示例代码&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WorldGenerator&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Vector2 dimesions;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Material meshMaterial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; perlinScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; waveHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Start is called before the first frame update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CreateCylinder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Update is called once per frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateCylinder&lt;/span&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//Mesh通过网格绘制的，MeshFiltrer 持有的Mesh的引用，MeshRenderer持有的材质的引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//创建 gameobject并且命名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        GameObject newCylinder = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; GameObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newCylinder.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;World piece&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//添加MeshFilter组件 和 MeshRenderer组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MeshFilter meshFilter = newCylinder.AddComponent&amp;lt;MeshFilter&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MeshRenderer meshRenderer = newCylinder.AddComponent&amp;lt;MeshRenderer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//添加材质 包含纹理，shader等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        meshRenderer.material = meshMaterial;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//创建一个网格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        meshFilter.mesh =Generate();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//创建网格以后，添加碰撞，适配新的mesh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        newCylinder.AddComponent&amp;lt;MeshCollider&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Mesh &lt;span class=&#34;title&#34;&gt;Generate&lt;/span&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Mesh mesh = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Mesh();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mesh.name = &lt;span class=&#34;string&#34;&gt;&amp;quot;MESH&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Vector3[] vertices = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//三角形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] triangles = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Vector2[] uv = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CreateShape(&lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; vertices, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; uv, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; triangles);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//再去赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mesh.vertices = vertices;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mesh.triangles = triangles;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mesh.uv = uv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mesh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CreateShape&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; Vector3[] vertices, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; Vector2[] uvs, &lt;span class=&#34;keyword&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[] triangles&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; xCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimesions.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; zCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimesions.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vertices = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uvs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        triangles = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[xCount * zCount * &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将半径设置为固定值，避免受到分段数和scale的影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; radius = &lt;span class=&#34;number&#34;&gt;5.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt;= xCount; x++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt;= zCount; z++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; angle = x * Mathf.PI * &lt;span class=&#34;number&#34;&gt;2f&lt;/span&gt; / xCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Cos(angle) * radius,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Sin(angle) * radius,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    z * scale&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                uvs[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(x * scale, z * scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pX = (vertices[index].x * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pY = (vertices[index].y * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Vector3 center = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, vertices[index].z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] += (center - vertices[index]).normalized * Mathf.PerlinNoise(pX, pY) * waveHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; triIndex = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; xCount; x++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt; zCount; z++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; topLeft = x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; bottomLeft = (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-顶点创建代码解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-顶点创建代码解析&#34;&gt;#&lt;/a&gt; 1. 顶点创建代码解析&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取横向（圆周）和纵向（高度）方向的分段数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; xCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimesions.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; zCount = (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;)dimesions.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化顶点和 UV 数组，数组大小基于网格的尺寸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vertices = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        uvs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2[(xCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        triangles = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;[xCount * zCount * &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// 每个矩形需要两个三角形，每个三角形有 3 个顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为什么数组的下标初始化为 &lt;code&gt;(xCount + 1) * (zCount + 1)&lt;/code&gt;  呢？&lt;br&gt;
考虑一个简单的例子：一个 2×2 的网格。这个网格包含 4 个单元格（每个单元格可以被两个三角形定义）。但要定义这 4 个单元格的顶点，实际需要 9 个顶点。&lt;br&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;顶点布局 &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;variable&#34;&gt;xCount&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;zCount&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;O&lt;/span&gt; 表示顶点，网格有 &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; 个单元格，但需要 &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; 个顶点&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;解释为什么需要额外的顶点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解释为什么需要额外的顶点&#34;&gt;#&lt;/a&gt; 解释为什么需要额外的顶点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边界共享&lt;/strong&gt;：每个单元格的边界与相邻单元格共享顶点，因此在  &lt;code&gt;x&lt;/code&gt;  和  &lt;code&gt;z&lt;/code&gt;  方向上都需要比单元格数量多 1 个顶点来包围网格的边界。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;顶点数量计算&lt;/strong&gt;：这样，每一行有  &lt;code&gt;xCount + 1&lt;/code&gt;  个顶点，每一列有  &lt;code&gt;zCount + 1&lt;/code&gt;  个顶点。总顶点数为 (xCount+1)×(zCount+1)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-顶点循环初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-顶点循环初始化&#34;&gt;#&lt;/a&gt; 2. 顶点循环初始化&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 用于遍历顶点和 UV 数组的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; radius = &lt;span class=&#34;number&#34;&gt;5.0f&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 固定半径，避免受到分段数和 scale 的影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 遍历 x 和 z 方向，为每个顶点计算位置和 UV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt;= xCount; x++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt;= zCount; z++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 计算当前 x 的角度（沿圆周分布）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; angle = x * Mathf.PI * &lt;span class=&#34;number&#34;&gt;2f&lt;/span&gt; / xCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 使用三角函数计算圆周上的 x 和 y 坐标，z 方向拉伸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Cos(angle) * radius,    &lt;span class=&#34;comment&#34;&gt;// x 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Sin(angle) * radius,    &lt;span class=&#34;comment&#34;&gt;// y 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    z * scale                     &lt;span class=&#34;comment&#34;&gt;// z 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 设置 UV 坐标，用于贴图映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                uvs[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(x * scale, z * scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 应用 Perlin 噪声，为网格增加波动效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pX = (vertices[index].x * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; pY = (vertices[index].y * perlinScale) + offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Vector3 center = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, vertices[index].z);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] += (center - vertices[index]).normalized * Mathf.PerlinNoise(pX, pY) * waveHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                index++; &lt;span class=&#34;comment&#34;&gt;// 移动到下一个顶点索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;圆柱体平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#圆柱体平面&#34;&gt;#&lt;/a&gt; 圆柱体平面&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 计算当前 x 的角度（沿圆周分布）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; angle = x * Mathf.PI * &lt;span class=&#34;number&#34;&gt;2f&lt;/span&gt; / xCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 使用三角函数计算圆周上的 x 和 y 坐标，z 方向拉伸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                vertices[index] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Cos(angle) * radius,    &lt;span class=&#34;comment&#34;&gt;// x 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Mathf.Sin(angle) * radius,    &lt;span class=&#34;comment&#34;&gt;// y 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    z * scale                     &lt;span class=&#34;comment&#34;&gt;// z 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 可以参考一个圆的横截面，radius 是半径，通过不同的 x/xCount 遍历不同的角度以达到不同的角度&lt;br&gt;
同时我认为 xCount 的大小会影响圆面的平滑情况，因为遍历是以 1 为递增的，xCount 越大，两个圆顶点的距离就越小，圆就越平滑&lt;/p&gt;
&lt;h4 id=&#34;柏林噪声&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#柏林噪声&#34;&gt;#&lt;/a&gt; 柏林噪声&lt;/h4&gt;
&lt;h5 id=&#34;1-center-verticesindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-center-verticesindex&#34;&gt;#&lt;/a&gt; 1.  &lt;code&gt;(center - vertices[index])&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;  是一个三维向量，代表当前顶点在  &lt;code&gt;z&lt;/code&gt;  轴方向上的中心点坐标  &lt;code&gt;Vector3(0, 0, vertices[index].z)&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertices[index]&lt;/code&gt;  是当前顶点的坐标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(center - vertices[index])&lt;/code&gt;  计算了从  &lt;code&gt;vertices[index]&lt;/code&gt;  指向  &lt;code&gt;center&lt;/code&gt;  的向量，即当前顶点指向中心的方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，我们就可以让噪声影响顶点在朝向中心的方向上产生波动效果，使得顶点偏移不固定在某一方向，而是会朝向柱体中心产生偏移。&lt;/p&gt;
&lt;h5 id=&#34;2-center-verticesindexnormalized&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-center-verticesindexnormalized&#34;&gt;#&lt;/a&gt; 2.  &lt;code&gt;(center - vertices[index]).normalized&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.normalized&lt;/code&gt;  将这个向量单位化，使其长度为 1，仅保留方向而去除大小。&lt;/li&gt;
&lt;li&gt;这样可以确保后续的偏移量是沿着&lt;strong&gt;顶点指向中心的方向&lt;/strong&gt;发生的，而不会影响偏移量的大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3-mathfperlinnoisepx-py&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-mathfperlinnoisepx-py&#34;&gt;#&lt;/a&gt; 3.  &lt;code&gt;Mathf.PerlinNoise(pX, pY)&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mathf.PerlinNoise(pX, pY)&lt;/code&gt;  使用 Perlin 噪声生成一个 0 到 1 之间的浮点数。&lt;/li&gt;
&lt;li&gt;其中  &lt;code&gt;pX&lt;/code&gt;  和  &lt;code&gt;pY&lt;/code&gt;  是顶点的  &lt;code&gt;x&lt;/code&gt;  和  &lt;code&gt;y&lt;/code&gt;  值经过缩放和偏移后的坐标，用于产生不同的噪声值。&lt;/li&gt;
&lt;li&gt;Perlin 噪声生成的数值是平滑连续的，使用它可以创建出平滑的波动效果，而不是完全随机的变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4-mathfperlinnoisepx-py-waveheight&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-mathfperlinnoisepx-py-waveheight&#34;&gt;#&lt;/a&gt; 4.  &lt;code&gt;Mathf.PerlinNoise(pX, pY) * waveHeight&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;waveHeight&lt;/code&gt;  是一个常数，控制波动的幅度，决定噪声的强度或影响力。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mathf.PerlinNoise(pX, pY) * waveHeight&lt;/code&gt;  表示噪声值的实际偏移距离。噪声值在 0 到  &lt;code&gt;waveHeight&lt;/code&gt;  之间波动，控制了每个顶点的偏移幅度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-center-verticesindexnormalized-mathfperlinnoisepx-py-waveheight&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-center-verticesindexnormalized-mathfperlinnoisepx-py-waveheight&#34;&gt;#&lt;/a&gt; 5.  &lt;code&gt;(center - vertices[index]).normalized * Mathf.PerlinNoise(pX, pY) * waveHeight&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;将噪声值乘以  &lt;code&gt;(center - vertices[index]).normalized&lt;/code&gt; ，将波动效果应用在顶点指向中心的方向上。&lt;/li&gt;
&lt;li&gt;因此， &lt;code&gt;Mathf.PerlinNoise(pX, pY) * waveHeight&lt;/code&gt;  生成的随机偏移量沿着  &lt;code&gt;center&lt;/code&gt;  指向当前顶点的方向，产生平滑的 “凹凸” 波动效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;6-verticesindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-verticesindex&#34;&gt;#&lt;/a&gt; 6.  &lt;code&gt;vertices[index] += (...)&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vertices[index] +=&lt;/code&gt;  将最终的偏移量加到  &lt;code&gt;vertices[index]&lt;/code&gt;  上，改变当前顶点的位置。&lt;/li&gt;
&lt;li&gt;这样每个顶点都会根据 Perlin 噪声的值产生偏移，效果上使得圆柱表面在朝向中心的方向上发生不规则的波动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三角形的遍历创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三角形的遍历创建&#34;&gt;#&lt;/a&gt; 三角形的遍历创建&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; triIndex = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 三角形数组的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 为每个网格单元创建两个三角形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; xCount; x++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt; zCount; z++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 计算当前单元格左上角和左下角顶点的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; topLeft = x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; bottomLeft = (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 第一个三角形的顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 第二个三角形的顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;顶点问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶点问题&#34;&gt;#&lt;/a&gt; 顶点问题&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 计算当前单元格左上角和左下角顶点的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; topLeft = x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; bottomLeft = (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 这里的  &lt;code&gt;topLeft&lt;/code&gt;  和  &lt;code&gt;bottomLeft&lt;/code&gt;  计算当前网格单元的左上角和左下角的顶点索引。&lt;/p&gt;
&lt;h5 id=&#34;1-topleft-x-zcount-1-z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-topleft-x-zcount-1-z&#34;&gt;#&lt;/a&gt; 1.  &lt;code&gt;topLeft = x * (zCount + 1) + z;&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;x * (zCount + 1)&lt;/code&gt; &lt;/strong&gt;：计算在  &lt;code&gt;x&lt;/code&gt;  行的开始位置的顶点索引。
&lt;ul&gt;
&lt;li&gt;由于每行包含  &lt;code&gt;zCount + 1&lt;/code&gt;  个顶点（多一个用于共享边界），所以每增加一行，顶点索引需要加上  &lt;code&gt;zCount + 1&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;+ z&lt;/code&gt; &lt;/strong&gt;：在当前行的基础上，增加  &lt;code&gt;z&lt;/code&gt;  偏移，用来定位该行的特定顶点位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-bottomleft-x-1-zcount-1-z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-bottomleft-x-1-zcount-1-z&#34;&gt;#&lt;/a&gt; 2.  &lt;code&gt;bottomLeft = (x + 1) * (zCount + 1) + z;&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;(x + 1) * (zCount + 1)&lt;/code&gt; &lt;/strong&gt;：定位到下一行的开始位置。
&lt;ul&gt;
&lt;li&gt;由于是  &lt;code&gt;x&lt;/code&gt;  行的下一行（ &lt;code&gt;x + 1&lt;/code&gt; ），所以这里要加上  &lt;code&gt;(x + 1) * (zCount + 1)&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;+ z&lt;/code&gt; &lt;/strong&gt;：在下一行的基础上，通过  &lt;code&gt;z&lt;/code&gt;  偏移找到下一行的特定顶点位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h5&gt;
&lt;p&gt;假设我们有一个  &lt;code&gt;2 x 2&lt;/code&gt;  的网格（即  &lt;code&gt;xCount = 2&lt;/code&gt; ， &lt;code&gt;zCount = 2&lt;/code&gt; ），需要 3 x 3 个顶点：&lt;br&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;顶点布局：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;--- 1 --- 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|     |     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;--- 4 --- 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|     |     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;--- 7 --- 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;计算顶点索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算顶点索引&#34;&gt;#&lt;/a&gt; 计算顶点索引&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于第一个单元格（ &lt;code&gt;x = 0&lt;/code&gt; ,  &lt;code&gt;z = 0&lt;/code&gt; ）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topLeft = 0 * (2 + 1) + 0 = 0&lt;/code&gt; ：顶点索引为  &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottomLeft = (0 + 1) * (2 + 1) + 0 = 3&lt;/code&gt; ：顶点索引为  &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们可以确定第一个单元格的顶点  &lt;code&gt;0&lt;/code&gt;  和  &lt;code&gt;3&lt;/code&gt;  的索引位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于第二个单元格（ &lt;code&gt;x = 0&lt;/code&gt; ,  &lt;code&gt;z = 1&lt;/code&gt; ）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topLeft = 0 * (2 + 1) + 1 = 1&lt;/code&gt; ：顶点索引为  &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottomLeft = (0 + 1) * (2 + 1) + 1 = 4&lt;/code&gt; ：顶点索引为  &lt;code&gt;4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们可以确定第二个单元格的顶点  &lt;code&gt;1&lt;/code&gt;  和  &lt;code&gt;4&lt;/code&gt;  的索引位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;遍历过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历过程&#34;&gt;#&lt;/a&gt; 遍历过程&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; xCount; x++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; z = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; z &amp;lt; zCount; z++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 计算当前单元格左上角和左下角顶点的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; topLeft = x * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; bottomLeft = (x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) * (zCount + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 第一个三角形的顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 第二个三角形的顶点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = topLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                triangles[triIndex++] = bottomLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里三角形的顶点值并不是具体的大小，而是对应的顶点下标。&lt;br&gt;
而为什么需要六个点呢，因为两个三角形构成一个矩形，而矩形有四个点，两个三角形有六个点，需要通过两个三角形才能确定一个矩形，故需要六个点来创建。&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="unity基础" scheme="http://example.com/categories/game-engine/unity/unityBasics/" />
        <updated>2024-11-07T11:29:08.336Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/11/04/computer/database/lec12%20Query%20Processing%20and%20Evaluation/</id>
        <title>lec_12 Query Processing and Evaluation</title>
        <link rel="alternate" href="http://example.com/2024/11/04/computer/database/lec12%20Query%20Processing%20and%20Evaluation/"/>
        <content type="html">&lt;h2 id=&#34;查询处理的基本步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询处理的基本步骤&#34;&gt;#&lt;/a&gt; 查询处理的基本步骤&lt;/h2&gt;
&lt;h3 id=&#34;1-查询处理的主要问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-查询处理的主要问题&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;查询处理的主要问题&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询处理&lt;/strong&gt;包含以下三个关键问题：
&lt;ol&gt;
&lt;li&gt;如何将 SQL 查询转换为 DBMS 理解的形式（处理阶段）。&lt;/li&gt;
&lt;li&gt;如何找到执行查询的最佳策略（优化阶段）。&lt;/li&gt;
&lt;li&gt;执行查询的具体标准是什么（执行阶段）​。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-dbms的内部结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-dbms的内部结构&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;DBMS 的内部结构&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组件概览&lt;/strong&gt;：包括前端应用接口、SQL 接口、查询处理和优化引擎、事务管理器、并发控制、文件和访问方法、缓冲管理器和磁盘空间管理器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询处理和优化引擎&lt;/strong&gt;负责将 SQL 命令转换为可执行的查询计划，并通过优化选择最低成本的查询执行方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统目录&lt;/strong&gt;存储数据库的元数据，辅助查询优化和执行​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-查询处理的基本步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-查询处理的基本步骤&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;查询处理的基本步骤&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;步骤 1：解析与转换&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;检查 SQL 语法和语义，将 SQL 查询转换为关系代数表达式（逻辑查询计划）。&lt;/li&gt;
&lt;li&gt;例如，将视图替换为实际子查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;步骤 2：查询优化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通过启发式方法重组查询，最小化中间结果的大小。&lt;/li&gt;
&lt;li&gt;选择具有最低成本的查询计划，并根据成本估算选择最优的执行策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;步骤 3：查询执行&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;执行查询计划中的操作，例如在执行树中使用不同的操作算法​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-查询处理示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-查询处理示例&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;查询处理示例&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;示例查询： &lt;code&gt;SELECT name FROM student NATURAL JOIN enrolled WHERE uosCode=&#39;COMP9120&#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换为关系代数表达式&lt;/strong&gt;：按条件选择、投影、连接等步骤分解成关系代数操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询执行计划&lt;/strong&gt;：使用嵌套循环、索引扫描、表访问等方式执行查询​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查询优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询优化&#34;&gt;#&lt;/a&gt; 查询优化&lt;/h2&gt;
&lt;h3 id=&#34;逻辑查询计划基于启发式的优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑查询计划基于启发式的优化&#34;&gt;#&lt;/a&gt; 逻辑查询计划：基于启发式的优化&lt;/h3&gt;
&lt;h4 id=&#34;1-等价代数表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-等价代数表达式&#34;&gt;#&lt;/a&gt; 1. 等价代数表达式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;提出了通过代数表达式将 SQL 查询转换为逻辑查询计划的概念，目标是确保等价转换的正确性和提高执行效率。&lt;/li&gt;
&lt;li&gt;强调了逻辑操作层面的转换规则，并举例展示了如何将初始查询表示为等价的代数表达式查询优化策略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启发式优化（Heuristic Optimization）&lt;/strong&gt;：通过重新排列查询树中的操作顺序来减少中间结果大小。
&lt;ul&gt;
&lt;li&gt;例如，优先执行选择和投影操作，以尽量缩小参与连接的关系大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代数转换规则&lt;/strong&gt;：应用一系列代数规则进行等价转换，优化执行计划。例如：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;投影级联&lt;/strong&gt;：通过级联操作消除多余的属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择级联&lt;/strong&gt;：将选择条件合并，以减少筛选操作次数 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-选择分布律可以将选择条件在连接之前应用到各个关系上以减少连接的复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-选择分布律可以将选择条件在连接之前应用到各个关系上以减少连接的复杂度&#34;&gt;#&lt;/a&gt; 2. - &lt;strong&gt;选择分布律&lt;/strong&gt;：可以将选择条件在连接之前应用到各个关系上，以减少连接的复杂度。&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; 示例：对于查询`&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; Deposit, Customer, Branch &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; Customercity&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sydney&amp;#x27;&lt;/span&gt;`，可将条件`Customercity&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sydney&amp;#x27;&lt;/span&gt;`应用于`Customer`表，从而减少最终的连接操作 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;投影优化&lt;/strong&gt;：尽可能不必要的属性，降低数据处理量。&lt;/li&gt;
&lt;li&gt;示例展示了在查询执行中尽量早地移除不需要的列，从而优化整体查询性能 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-查询优化规则总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-查询优化规则总结&#34;&gt;#&lt;/a&gt; 4. 查询优化规则总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提出了五条 1. &lt;strong&gt;连接交换律&lt;/strong&gt;：R1 ⋈ R2 = R2 ⋈ R1 2. &lt;strong&gt;连接结合律&lt;/strong&gt;：((R1 ⋈ R2) ⋈ R3) = (R1 ⋈ (R2 ⋈ R3)) 3. &lt;strong&gt;投影级联&lt;/strong&gt;：若属性集 &lt;code&gt;B1, ..., Bn&lt;/code&gt;  是属性集 &lt;code&gt;A1, ..., An&lt;/code&gt;  的子集，则 &lt;code&gt;ΠB1,...,Bn (ΠA1,...,An (R)) = ΠB1,...,Bn (R)&lt;/code&gt;  4. &lt;strong&gt;选择级联&lt;/strong&gt;：σΘ1 (σΘ2 (R)) = σΘ1∧Θ2 (R) 5. &lt;strong&gt;选择分布律&lt;/strong&gt;：σθ(R1 ⋈ R2) = (σθ(R1)) ⋈ R2 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-投影和选择的进一步优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-投影和选择的进一步优化&#34;&gt;#&lt;/a&gt; 5. 投影和选择的进一步优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;投影优化策略可以通过剔除据量。&lt;/li&gt;
&lt;li&gt;选择操作的分布则可以减少参与连接的记录数量，有助于提高执行效率。&lt;/li&gt;
&lt;li&gt;这些优化策略的目标是减少查询的中间结果大小，从而优化 I/O 成本 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;物理查询计划成本估算优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理查询计划成本估算优化&#34;&gt;#&lt;/a&gt; 物理查询计划：成本估算优化&lt;/h2&gt;
&lt;h4 id=&#34;1-物理查询计划-physical-query-plan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-物理查询计划-physical-query-plan&#34;&gt;#&lt;/a&gt; 1. 物理查询计划 (Physical Query Plan)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;物理查询计划将逻辑查询操作转化为实际的执行步骤，包含具体的算法选择。主要目标是通过优化 I/O 操作来找到最低成本的执行计划查询执行计划 (Query Execution Plan)&lt;/li&gt;
&lt;li&gt;查询执行计划是一种详细的评估策略，使用物理操作符来指定查询的实际执行方式。&lt;/li&gt;
&lt;li&gt;例如，给定自然连接的关系 R (A,B,C) 和 S (C,D)，可以通过&lt;strong&gt;索引扫描&lt;/strong&gt;、&lt;strong&gt;表扫描&lt;/strong&gt;和&lt;strong&gt;嵌套循环连接&lt;/strong&gt;等方式实现查询操作 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-查询优化器会计算不同执行计划的成本主要通过io操作数来估算代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-查询优化器会计算不同执行计划的成本主要通过io操作数来估算代价&#34;&gt;#&lt;/a&gt; 3. - 查询优化器会计算不同执行计划的成本，主要通过&lt;strong&gt; I/O 操作数&lt;/strong&gt;来估算代价。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;影响成本的因素包括可用的访问方法（如索引、扫描）和数据的物理组织方式（如数据是否排序） 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-连接操作-joi-嵌套循环连接nested-loop-join适用于任意连接条件但在io方面代价较高-需要逐一扫描每一页来查找匹配项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-连接操作-joi-嵌套循环连接nested-loop-join适用于任意连接条件但在io方面代价较高-需要逐一扫描每一页来查找匹配项&#34;&gt;#&lt;/a&gt; 4. 连接操作 (Joi - &lt;strong&gt;嵌套循环连接（Nested Loop Join）&lt;/strong&gt;：适用于任意连接条件，但在 I/O 方面代价较高。需要逐一扫描每一页来查找匹配项。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;（Nested Loop Join)&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Fnested%E4%BE%8B%E5%AD%90.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Fnested%20loop.png&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块嵌套循环连接（Block-Nested Loop Join）&lt;/strong&gt;：优化了嵌套循环连接，通过一次加载块中的多条记录来减少内层扫描次数 。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;工作原理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;块嵌套循环连接是对简单嵌套循环连接的优化。通过将外表的数据分块，可以减少内层扫描的次数，降低 I/O 成本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体步骤：
&lt;ol&gt;
&lt;li&gt;将外表 RRR 分成多个块（block），每个块可以包含多个页面（page）。&lt;/li&gt;
&lt;li&gt;将一个块加载到内存中，然后遍历内表 SSS 的所有页面。&lt;/li&gt;
&lt;li&gt;对于内表 SSS 中的每条记录，检查是否有匹配的外表记录。&lt;/li&gt;
&lt;li&gt;若匹配，将结果加入到结果集中。&lt;/li&gt;
&lt;li&gt;重复以上步骤，直到外表的所有块都处理完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;I/O 成本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外表 RRR 有 bRb_RbR​ 个页面。&lt;/li&gt;
&lt;li&gt;内表 SSS 有 bSb_SbS​ 个页面。&lt;/li&gt;
&lt;li&gt;内存可容纳 MMM 个页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的 I/O 成本为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Fio%E5%85%AC%E5%BC%8F1.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bRb_RbR​&lt;/strong&gt; 表示首次将外表 RRR 加载到内存的成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bRM−1\frac{b_R}{M - 1}M−1bR​​&lt;/strong&gt; 表示将外表 RRR 分成的块数，因为内存中一个块最多可以放 M−1M - 1M−1 个页面。&lt;/li&gt;
&lt;li&gt;每个块都需要扫描内表 SSS 一次，因此需要乘以 bSb_SbS​。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;优缺点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过分块减少了内层扫描的次数，比简单嵌套循环连接效率更高。&lt;/li&gt;
&lt;li&gt;适合内存较大的情况，因为更多的内存可以容纳更大的块，从而减少内表的扫描次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果内存较小，块的大小受限，效果不如预期。&lt;/li&gt;
&lt;li&gt;对于特别大的数据集，仍然可能需要大量的 I/O 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;块嵌套循环连接适用于没有索引且内存相对充足的情况。特别是在数据量大而内表没有索引时，块嵌套循环连接是一个不错的选择。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Fblock%20nested.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引嵌套循环连接（Index-Neste）&lt;/strong&gt;：利用内层表的索引来查找外层表的匹配记录。此方法的成本主要由外层表的页数和索引查找成本组成 。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;工作原理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;索引嵌套循环连接是利用内表的索引来优化嵌套循环连接。每次在外表中读取一条记录时，不需要扫描内表的所有记录，而是通过索引直接找到匹配记录。&lt;br&gt;
2. 具体步骤：&lt;br&gt;
1. 对于外表 RRR 中的每条记录 rrr，使用内表 SSS 上的索引查找与 rrr 匹配的记录。&lt;br&gt;
2. 如果找到匹配的记录，将匹配的记录对加入结果集。&lt;br&gt;
3. 重复此操作，直到外表 RRR 的所有记录都处理完毕。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;I/O 成本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外表 RRR 有 bRb_RbR​ 个页面，总记录数为 TRT_RTR​。&lt;/li&gt;
&lt;li&gt;内表 SSS 有索引，访问索引的成本为 CCC（通常表示为读取索引和数据页的 I/O 成本）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的 I/O 成本为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Fio%E5%85%AC%E5%BC%8F2.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bRb_RbR​&lt;/strong&gt; 是读取外表的 I/O 成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TR×CT_R \times CTR​×C&lt;/strong&gt; 表示对每条外表记录，通过索引在内表中查找匹配记录的 I/O 成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;优缺点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当内表有索引时，索引嵌套循环连接能显著降低 I/O 成本，因为它不需要对内表进行全表扫描。&lt;/li&gt;
&lt;li&gt;适合等值连接（Equality Join），因为索引可以快速定位特定值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;需要内表上有合适的索引。如果内表没有索引，则索引嵌套循环连接的效率会很低。&lt;/li&gt;
&lt;li&gt;对于范围连接（如  &lt;code&gt;BETWEEN&lt;/code&gt;  操作），性能优势不如等值连接明显，因为范围查询可能需要扫描多个索引条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;索引嵌套循环连接适用于以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外表的记录数相对较少，而内表有适合的索引。&lt;/li&gt;
&lt;li&gt;需要进行等值连接的场景，如主键 - 外键连接。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2Findex%20nested.png&#34; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-外部排序算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-外部排序算法&#34;&gt;#&lt;/a&gt; 5. 外部排序算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外部合并排序（External）&lt;/strong&gt;：用于对数据进行外部排序，适用于内存不足的情况。算法包括两个主要步骤：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建有序的分段（sorted runs）&lt;/strong&gt;：将数据分块加载到内存，进行内部排序后写回磁盘。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并有序分段&lt;/strong&gt;：逐次合并多个有序分段，最终生成完整的有序数据 。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;外部合并排序的基本思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部合并排序的基本思想&#34;&gt;#&lt;/a&gt; 外部合并排序的基本思想&lt;/h4&gt;
&lt;p&gt;外部合并排序通过以下两个阶段来完成排序任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;划分阶段（Partition Phase 或 Run Generation Phase）&lt;/strong&gt;：将大文件分成多个可以放入内存的小块（称为 “有序分段”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并阶段（Merge Phase）&lt;/strong&gt;：将这些小块逐次合并，最终生成一个有序的大文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;外部合并排序的具体步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部合并排序的具体步骤&#34;&gt;#&lt;/a&gt; 外部合并排序的具体步骤&lt;/h4&gt;
&lt;h5 id=&#34;1-划分阶段生成有序分段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-划分阶段生成有序分段&#34;&gt;#&lt;/a&gt; 1. 划分阶段（生成有序分段）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;将整个数据集分为若干小块，每块的大小不超过内存容量。&lt;/li&gt;
&lt;li&gt;将每一块数据加载到内存中，并在内存中完成排序（例如使用快速排序或堆排序等内部排序算法）。&lt;/li&gt;
&lt;li&gt;将排序后的数据块（有序分段）写回磁盘。&lt;/li&gt;
&lt;li&gt;最终，得到多个已经排序好的小文件（有序分段），每个分段的大小不超过内存容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：假设我们有 1000 万条记录，内存只能容纳 100 万条记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 1000 万条记录分为 10 个小分段，每个分段包含 100 万条记录。&lt;/li&gt;
&lt;li&gt;将每个分段加载到内存中进行排序，然后写回磁盘，生成 10 个有序的分段文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-合并阶段逐层合并有序分段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-合并阶段逐层合并有序分段&#34;&gt;#&lt;/a&gt; 2. 合并阶段（逐层合并有序分段）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;将有序的分段逐层合并，直到最终生成一个完整的有序文件。&lt;/li&gt;
&lt;li&gt;合并时通常使用&lt;strong&gt;多路归并（k-way merge）&lt;/strong&gt;，即每次合并多个有序分段（通常是根据内存容量决定 k 的值）。&lt;/li&gt;
&lt;li&gt;每次合并的结果生成一个新的有序文件，重复此过程，直到所有分段合并为一个最终的有序文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继续以上的例子，10 个分段可以一次性加载 5 个到内存（假设内存可以同时容纳 5 个分段进行多路归并）。&lt;/li&gt;
&lt;li&gt;第一次合并，将 10 个分段两两合并成 5 个更大的有序分段。&lt;/li&gt;
&lt;li&gt;再次合并，直到最终得到一个完整的有序文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;io-成本分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io-成本分析&#34;&gt;#&lt;/a&gt; I/O 成本分析&lt;/h4&gt;
&lt;p&gt;外部合并排序的 I/O 成本主要来源于多次读取和写回分段的操作。总的 I/O 成本大致为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2F%E5%A4%96%E9%83%A8%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N 是数据总量的页面数。&lt;/li&gt;
&lt;li&gt;M 是内存能容纳的页面数。&lt;/li&gt;
&lt;li&gt;k 是内存中可容纳的分段数（即每次可以合并的分段数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;外部合并排序的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部合并排序的优点&#34;&gt;#&lt;/a&gt; 外部合并排序的优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效处理超大数据集&lt;/strong&gt;：外部合并排序可以对超过内存大小的数据进行排序，非常适合磁盘操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路归并减少合并次数&lt;/strong&gt;：每次合并尽可能多的分段，可以减少 I/O 操作次数，从而提高排序效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;外部合并排序的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部合并排序的缺点&#34;&gt;#&lt;/a&gt; 外部合并排序的缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高 I/O 开销&lt;/strong&gt;：频繁的磁盘读写会带来较高的 I/O 成本，特别是在磁盘速度较慢的情况下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要足够的磁盘空间&lt;/strong&gt;：在合并阶段，算法需要额外的磁盘空间存储中间结果文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h4&gt;
&lt;p&gt;外部合并排序广泛应用于需要处理大规模数据的场景，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库的排序操作（如  &lt;code&gt;ORDER BY&lt;/code&gt;  子句）。&lt;/li&gt;
&lt;li&gt;大数据处理系统中的排序任务。&lt;/li&gt;
&lt;li&gt;操作系统在内存不足时进行的文件排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-管道和物化-pipelining-and-materialization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-管道和物化-pipelining-and-materialization&#34;&gt;#&lt;/a&gt; 6. 管道和物化 （Pipelining and Materialization）&lt;/h3&gt;
&lt;p&gt;aterialization）**：逐步计算每个操作并将结果存储在临时关系中。此方法适用于简单的查询计划，但会增加 I/O 成本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管道（Pipelining）&lt;/strong&gt;：直接将一个操作的输出作为下一个操作的输入，减少了临时存储的需求，适用于较为复杂的查询 。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="数据库" scheme="http://example.com/categories/computer/database/" />
        <updated>2024-11-04T02:02:43.305Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/11/03/computer/database/lec11%20Storage%20and%20Indexing/</id>
        <title>lec_11 Storage and Indexing</title>
        <link rel="alternate" href="http://example.com/2024/11/03/computer/database/lec11%20Storage%20and%20Indexing/"/>
        <content type="html">&lt;h2 id=&#34;物理存储数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理存储数据&#34;&gt;#&lt;/a&gt; 物理存储数据&lt;/h2&gt;
&lt;h3 id=&#34;1-存储设备对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-存储设备对比&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;存储设备对比&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比较了硬盘（HDD）和内存（RAM）的特点：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬盘&lt;/strong&gt;：容量大、价格低、永久存储，但访问速度较慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存&lt;/strong&gt;：速度快、支持随机访问，但存储成本高且数据易失​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-数据块和缓冲管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-数据块和缓冲管理&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;数据块和缓冲管理&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据在硬盘上按 “块”（blocks）组织，每个块为固定大小（通常为 4KB 或 8KB），块是数据传输的基本单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲管理器&lt;/strong&gt;负责将数据块加载到内存，并在内存满时使用替换算法决定保留哪些数据块。常用的替换算法包括 **LRU（最近最少使用）&lt;strong&gt;和&lt;/strong&gt; MRU（最近最多使用）**​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;21-数据块blocks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-数据块blocks&#34;&gt;#&lt;/a&gt; 2.1 &lt;strong&gt;数据块（Blocks）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库中的数据通常存储在磁盘上，并按 “块”（block）为单位进行管理。数据块是操作系统在磁盘和内存之间传输数据的基本单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块大小&lt;/strong&gt;一般为 4KB 或 8KB，具体取决于操作系统和硬件配置。块的大小会影响 I/O 操作的效率：较大的块可以减少读取大文件时的 I/O 次数，但可能会增加小文件的空间浪费​。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块因素（Blocking Factor）&lt;/strong&gt;：这是块大小与记录大小的比率，决定了一个数据块中可以容纳多少条记录。如果记录较大，可能需要多个块来存储一条记录，这种情况称为 “记录跨块”（record spanning）。跨块存储会增加 I/O 复杂度，通常需要避免​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-缓冲区buffer和缓冲管理器buffer-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-缓冲区buffer和缓冲管理器buffer-manager&#34;&gt;#&lt;/a&gt; 2.2 &lt;strong&gt;缓冲区（Buffer）和缓冲管理器（Buffer Manager）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓冲区&lt;/strong&gt;是数据库系统在内存中保留的一块区域，用于暂存从磁盘加载的块。由于内存的访问速度比磁盘快得多，将数据块缓存在内存中可以显著提升查询速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲管理器&lt;/strong&gt;负责管理这些缓冲区块，主要任务包括：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;块的加载和释放&lt;/strong&gt;：根据需求从磁盘加载块到内存缓冲区，释放不再使用的块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块替换策略&lt;/strong&gt;：当内存缓冲区已满且需要加载新块时，选择要被替换的块。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-块替换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-块替换策略&#34;&gt;#&lt;/a&gt; 2.3 &lt;strong&gt;块替换策略&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库系统通常使用以下常见的替换算法来优化内存利用率：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LRU（Least Recently Used，最近最少使用）&lt;/strong&gt;：优先替换最久未使用的块，适用于访问数据呈局部性特征的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MRU（Most Recently Used，最近最多使用）&lt;/strong&gt;：优先替换最近使用的块，适用于某些需要频繁访问相同数据块的情况，如嵌套循环连接操作​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这些替换策略帮助缓冲管理器在内存中保留最可能被再次访问的块，从而减少频繁的 I/O 操作，提高查询性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;24-缓冲区示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-缓冲区示例&#34;&gt;#&lt;/a&gt; 2.4 &lt;strong&gt;缓冲区示例&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过一个连接操作的示例说明了如何选择替换策略：
&lt;ul&gt;
&lt;li&gt;假设执行的是一个嵌套循环连接，内表的块可能需要频繁访问，因此在这种情况下使用 MRU 策略会更有效，因为最近访问的块很快会再次被访问。&lt;/li&gt;
&lt;li&gt;通过合理的缓冲区管理和替换策略，可以显著减少 I/O 操作次数，从而提高查询效率​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;25-缓冲管理的重要性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-缓冲管理的重要性&#34;&gt;#&lt;/a&gt; 2.5 &lt;strong&gt;缓冲管理的重要性&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由于数据库通常远大于内存容量，无法将所有数据同时存储在内存中，因此需要有效的缓冲管理。&lt;/li&gt;
&lt;li&gt;缓冲管理的目标是通过智能的块加载和替换策略，将最常用的数据保留在内存中，以最小化磁盘访问次数，从而优化数据库系统的整体性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-存储示例和填充因子fill-factor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-存储示例和填充因子fill-factor&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;存储示例和填充因子（Fill Factor）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;举例说明了数据表中记录如何分布在数据块中。假设每条记录 200 字节，每页可容纳 19 条记录，因此需要 105,264 个数据页来存储共 2,000,000 条记录​。&lt;/li&gt;
&lt;li&gt;填充因子（Fill Factor）用于决定每个数据页中预留多少空间，以便在新数据插入时无需频繁分裂页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;31-存储示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-存储示例&#34;&gt;#&lt;/a&gt; 3.1 &lt;strong&gt;存储示例&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库表以固定大小的页面（page）形式存储，每个页面通常为 4KB。页面用于存储表中的多条记录。&lt;/li&gt;
&lt;li&gt;示例假设：
&lt;ul&gt;
&lt;li&gt;表  &lt;code&gt;Relation&lt;/code&gt;  包含 2,000,000 条记录，每条记录大小为 200 字节。&lt;/li&gt;
&lt;li&gt;每个页面大小为 4KB，其中 250 字节用于页面头部和记录指针数组，其余 3,846 字节用于实际数据存储​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每页存储的记录数&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每条记录为 200 字节，因此每页可以容纳的记录数为： 记录数 =⌊3846 字节 200 字节 / 记录⌋=19 条记录 \text {记录数} = \left\lfloor \frac {3846 \text { 字节}}{200 \text { 字节 / 记录}} \right\rfloor = 19 \text { 条记录} 记录数 =⌊200 字节 / 记录 3846 字节​⌋=19 条记录&lt;/li&gt;
&lt;li&gt;因此，总共需要约 105,264 个页面来存储全部记录​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-填充因子fill-factor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-填充因子fill-factor&#34;&gt;#&lt;/a&gt; 3.2 &lt;strong&gt;填充因子（Fill Factor）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：填充因子决定了每个页面用于存储数据的空间百分比。设定较低的填充因子会在页面中预留一定的空闲空间，便于后续插入新数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：通过保留空闲空间，填充因子减少了页面分裂的频率，有助于提高索引的维护效率。通常数据库在创建索引或存储页面时可以设置填充因子的值，如 80% 或 75%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;若填充因子设置为 75%，则每页仅填充 3/4 的数据： 19 条记录 ×75%=14 条记录 / 页（取整后）19 \text {条记录} \times 75% = 14 \text { 条记录 / 页（取整后）} 19 条记录 ×75%=14 条记录 / 页（取整后）&lt;/li&gt;
&lt;li&gt;在这种情况下，需要的页面数增加到 142,858 页，以满足较低填充因子下的存储需求，这也会带来额外的存储开销​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-填充因子的影响&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-填充因子的影响&#34;&gt;#&lt;/a&gt; 3.3 &lt;strong&gt;填充因子的影响&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：较低的填充因子提高了插入新数据的灵活性，减少了频繁页面分裂的开销，适合需要大量插入操作的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间开销&lt;/strong&gt;：虽然较低的填充因子带来额外的存储开销，但它能显著减少页面分裂的次数，从而提高系统的整体性能。&lt;/li&gt;
&lt;li&gt;示例中，设置填充因子为 75% 带来了 47% 的额外存储开销。这种设计通常用于索引页面，以保证索引更新时的效率​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-典型文件组织方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-典型文件组织方式&#34;&gt;#&lt;/a&gt; 4 &lt;strong&gt;典型文件组织方式&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;堆文件（Heap Files）&lt;/strong&gt;：无序存储，适用于全表扫描，插入和删除开销较小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序文件（Sorted Files）&lt;/strong&gt;：按键值排序，适合二分查找，但插入和更新成本较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引文件（Index Files）&lt;/strong&gt;：利用索引（如 B + 树或哈希索引）来提升数据访问速度​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;41-无序文件heap-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-无序文件heap-files&#34;&gt;#&lt;/a&gt; 4.1 &lt;strong&gt;无序文件（Heap Files）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：无序文件将记录以随机顺序存储在可用空间中，不对数据进行任何排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：插入和删除操作快速简单，因为无需重新排列数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：在没有索引的情况下，查询需要扫描整个表（即线性扫描），查询效率较低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：适合需要频繁插入和删除数据的表，特别是需要全表扫描的场景，如日志记录和历史数据存储​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-排序文件sorted-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-排序文件sorted-files&#34;&gt;#&lt;/a&gt; 4.2 &lt;strong&gt;排序文件（Sorted Files）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：排序文件按特定的搜索键（search key）对记录进行排序存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：对等值查询和范围查询非常高效，支持二分查找，从而减少了 I/O 操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：插入和删除操作代价较高，因为插入新记录或删除记录后需要保持数据的排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：适合数据更新较少、查询频繁的场景，例如数据仓库或查询量大的报表数据​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;43-索引文件index-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-索引文件index-files&#34;&gt;#&lt;/a&gt; 4.3 &lt;strong&gt;索引文件（Index Files）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：索引文件在特定字段上建立数据结构（如 B + 树或哈希表），用于加速数据检索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：索引能够显著提高查询效率，尤其适用于等值查询和范围查询（如 B + 树索引）。此外，索引通常存储在独立的页面中，并与数据页分开。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：需要额外的存储空间来存放索引页；每次数据插入、删除或更新时，索引页也需要更新，带来额外的 I/O 开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型索引类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;哈希索引&lt;/strong&gt;：适合等值查询，不支持范围查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B + 树索引&lt;/strong&gt;：既支持等值查询，也支持范围查询，是关系型数据库中常用的索引结构​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;44-文件组织方式的比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-文件组织方式的比较&#34;&gt;#&lt;/a&gt; 4.4 &lt;strong&gt;文件组织方式的比较&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无序文件&lt;/strong&gt;在插入和删除操作中速度较快，但查询效率较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序文件&lt;/strong&gt;在范围查询和等值查询上较高效，但插入和删除操作较慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引文件&lt;/strong&gt;通过额外的索引结构在查询上具有显著优势，但维护索引需要额外的 I/O 开销和存储空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;45-适用性总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-适用性总结&#34;&gt;#&lt;/a&gt; 4.5 &lt;strong&gt;适用性总结&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无序文件&lt;/strong&gt;适合高频插入和删除且不要求快速查询的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序文件&lt;/strong&gt;适合更新较少且需要高效范围查询的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引文件&lt;/strong&gt;是最常用的方式，通过索引结构显著提升查询效率，尤其适合查询频繁的业务表​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何从-dbms-中检索记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何从-dbms-中检索记录&#34;&gt;#&lt;/a&gt; 如何从 DBMS 中检索记录&lt;/h2&gt;
&lt;h3 id=&#34;1-访问路径access-paths&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-访问路径access-paths&#34;&gt;#&lt;/a&gt; 1. 访问路径（Access Paths）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：访问路径是一种用于检索记录的方法，包括用于检索和存储表中记录的数据结构（如索引）和算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三种访问方法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性扫描&lt;/strong&gt;：适用于无序（Heap）文件，对所有记录逐一检查。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分查找&lt;/strong&gt;：适用于排序文件，I/O 成本较低，可快速找到目标记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引扫描&lt;/strong&gt;：使用索引可以直接定位记录，效率高​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-物理数据独立性physical-data-independence&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-物理数据独立性physical-data-independence&#34;&gt;#&lt;/a&gt; 2. 物理数据独立性（Physical Data Independence）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：选择访问路径的方式不会影响 SQL 语句的语义，但可能对执行时间有很大影响。&lt;/li&gt;
&lt;li&gt;物理数据独立性确保了查询语句与底层存储结构的独立性​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-无序文件的访问方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-无序文件的访问方法&#34;&gt;#&lt;/a&gt; 3. 无序文件的访问方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：无序文件的记录没有特定的顺序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问方法&lt;/strong&gt;：通常通过线性扫描实现，每次检查一个页面中的所有记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：平均情况下需要读取一半页面，最坏情况下需要读取整个文件​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-线性扫描的io成本示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-线性扫描的io成本示例&#34;&gt;#&lt;/a&gt; 4. 线性扫描的 I/O 成本示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假设表有 140,351 个页面，用于查询一个唯一的  &lt;code&gt;tuplekey&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;等值查询equality-search&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等值查询equality-search&#34;&gt;#&lt;/a&gt; 等值查询（Equality Search）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果  &lt;code&gt;tuplekey&lt;/code&gt;  是&lt;strong&gt;唯一的&lt;/strong&gt;，一旦找到匹配记录可以立刻终止。&lt;/li&gt;
&lt;li&gt;平均情况下，需要检查约一半的页面，因为匹配记录可能位于任意位置。I/O 成本大约为： 140,3512≈70,176 次 I/O\frac {140,351}{2} \approx 70,176 \text { 次 I/O} 2140,351​≈70,176 次 I/O&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最坏情况&lt;/strong&gt;：如果没有匹配记录或  &lt;code&gt;tuplekey&lt;/code&gt;  不是唯一的，则需要扫描所有 140,351 个页面，即需要 140,351 次 I/O 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;范围查询range-search&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#范围查询range-search&#34;&gt;#&lt;/a&gt; 范围查询（Range Search）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;例如，执行查询  &lt;code&gt;SELECT * FROM Relation WHERE attribute1 BETWEEN 100 AND 119;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;对于范围查询，由于无序文件中记录是随机存放的，因此无法提前结束扫描，需要检查每个页面中的每条记录。&lt;/li&gt;
&lt;li&gt;这类查询通常会导致&lt;strong&gt;全表扫描&lt;/strong&gt;，因此 I/O 成本为 140,351 次 I/O​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-排序文件的访问方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-排序文件的访问方法&#34;&gt;#&lt;/a&gt; 5. 排序文件的访问方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排序文件&lt;/strong&gt;：记录按某属性排序存储，适合频繁的等值和范围查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分查找&lt;/strong&gt;：对于包含 140,351 个页面的表，最坏情况下 I/O 成本为 log⁡2140,351≈18\log_2 140,351 \approx 18log2​140,351≈18 次 I/O​。&lt;br&gt;
&amp;lt;二分查找图 -- 回家再上传&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-索引indexing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-索引indexing&#34;&gt;#&lt;/a&gt; 6. 索引（Indexing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：索引是一种数据结构，用于将搜索键值映射到记录集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常见索引类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;哈希索引&lt;/strong&gt;：适合等值查询，但不支持范围查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B + 树索引&lt;/strong&gt;：支持等值和范围查询，适合关系型数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：索引需要额外的存储空间，并在表数据更新时带来维护开销，但总体上索引带来的查询性能提升大于这些缺点​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b树&#34;&gt;#&lt;/a&gt; B + 树&lt;/h2&gt;
&lt;h3 id=&#34;1-b树的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-b树的定义&#34;&gt;#&lt;/a&gt; 1. B + 树的定义&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;B + 树&lt;/strong&gt;是一种自平衡的树形结构索引，用于在磁盘上组织和管理数据。&lt;/li&gt;
&lt;li&gt;与 B 树不同，B + 树将所有数据都存储在叶子节点中，而内部节点仅用于存储键值和指针，以引导查询过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叶子节点&lt;/strong&gt;按键值顺序连接，形成一个链表，支持高效的范围查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-b树的结构特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-b树的结构特点&#34;&gt;#&lt;/a&gt; 2. B + 树的结构特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部节点（Internal Nodes）&lt;/strong&gt;：存储搜索键和指针，用于引导搜索过程，但不存储实际数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叶子节点（Leaf Nodes）&lt;/strong&gt;：存储所有数据条目，且按顺序链接，支持顺序访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的高度&lt;/strong&gt;：B + 树的所有叶子节点在同一层，路径长度一致，使得树是平衡的。因此，在 B + 树中查找任意记录所需的 I/O 次数相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-b树的构建过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-b树的构建过程&#34;&gt;#&lt;/a&gt; 3. B + 树的构建过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引条目&lt;/strong&gt;：在每个记录页面生成一个索引条目，并将这些索引条目组织成 B + 树的内部结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层次结构&lt;/strong&gt;：构建 B + 树的多层结构，从叶子层到根节点逐层递归构建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;填充因子（Fill Factor）&lt;/strong&gt;：通常设置在 75% 左右，避免叶子节点过满，提高插入、删除的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-b树的查找过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-b树的查找过程&#34;&gt;#&lt;/a&gt; 4. B + 树的查找过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;等值查询（Equality Search）&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;从根节点开始，根据键值逐层向下查找，直到找到目标叶子节点。&lt;/li&gt;
&lt;li&gt;在叶子节点中查找目标记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围查询（Range Search）&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;通过等值查询找到范围的起始位置。&lt;/li&gt;
&lt;li&gt;然后按顺序访问相邻的叶子节点，直到范围结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-b树的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-b树的优点&#34;&gt;#&lt;/a&gt; 5. B + 树的优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效的等值查询和范围查询&lt;/strong&gt;：B + 树结构保证了所有叶子节点的有序性，支持快速定位范围的起始位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘 I/O 效率高&lt;/strong&gt;：B + 树通过多层结构减少了每次查询所需的 I/O 次数。在大数据集上，B + 树的层数较少，通常只需 3-4 次 I/O 即可找到目标记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持动态更新&lt;/strong&gt;：插入和删除操作可以在 B + 树中高效执行，且不会影响其平衡性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-b树的劣势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-b树的劣势&#34;&gt;#&lt;/a&gt; 6. B + 树的劣势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;额外的存储开销&lt;/strong&gt;：B + 树需要存储内部节点和叶子节点的指针，会占用额外的存储空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护成本&lt;/strong&gt;：每当数据插入、删除时，B + 树需要保持平衡和顺序，带来一定的维护开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-b树在数据库中的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-b树在数据库中的应用&#34;&gt;#&lt;/a&gt; 7. B + 树在数据库中的应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;B + 树常用于关系型数据库中的主键索引、唯一索引和范围索引。&lt;/li&gt;
&lt;li&gt;它在查询优化中发挥关键作用，特别是在大规模数据集的等值查询和范围查询中，可以显著减少 I/O 操作次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-举例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-举例&#34;&gt;#&lt;/a&gt; 8. 举例：&lt;/h3&gt;
&lt;h4 id=&#34;1-构建逻辑有序数据文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-构建逻辑有序数据文件&#34;&gt;#&lt;/a&gt; 1. 构建逻辑有序数据文件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;假设表  &lt;code&gt;Relation&lt;/code&gt;  包含 140,351 个页面，每个页面中的记录按  &lt;code&gt;tuplekey&lt;/code&gt;  逻辑排序。&lt;/li&gt;
&lt;li&gt;页面内的记录按键值排序，但页面在磁盘上的存储位置可能并不连续。这种组织方式称为&lt;strong&gt;逻辑有序文件&lt;/strong&gt;​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-为每个记录页面创建索引条目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-为每个记录页面创建索引条目&#34;&gt;#&lt;/a&gt; 2. 为每个记录页面创建索引条目&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为数据文件中的每个页面创建一个索引条目，每个条目包含搜索键（ &lt;code&gt;tuplekey&lt;/code&gt; ）和一个指向数据页面的指针  &lt;code&gt;rowid&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;每个索引条目占用 8 字节（4 字节的键和 4 字节的指针），可以在 4KB 页面中存储最多 480 个索引条目​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-将索引条目装入页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-将索引条目装入页面&#34;&gt;#&lt;/a&gt; 3. 将索引条目装入页面&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;假设页面的填充因子（即平均占用率）为 75%，则每个索引页面平均包含 360 个索引条目。&lt;/li&gt;
&lt;li&gt;这样，索引层次中将需要 140,351 / 360 ≈ 390 个索引页面​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-构建b树索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-构建b树索引&#34;&gt;#&lt;/a&gt; 4. 构建 B + 树索引&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引的下一层包含 390 个索引条目，即需要 2 个页面来存储这些条目。&lt;/li&gt;
&lt;li&gt;根层包含 2 个索引条目，因此只需 1 个页面。&lt;/li&gt;
&lt;li&gt;因此，B + 树索引的总页面数为 390 + 2 + 1 = 393 页，相对于数据表的大小仅增加了 0.2% 的存储​。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-b树索引中的查找过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-b树索引中的查找过程&#34;&gt;#&lt;/a&gt; 5. B + 树索引中的查找过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;例如，执行查询  &lt;code&gt;SELECT * FROM Relation WHERE tuplekey=715;&lt;/code&gt;  时，可以按以下步骤查找：
&lt;ol&gt;
&lt;li&gt;加载根页面到内存（1 次 I/O）。&lt;/li&gt;
&lt;li&gt;找到下一级索引页面的位置并加载（1 次 I/O）。&lt;/li&gt;
&lt;li&gt;重复直到找到叶子节点页面。&lt;/li&gt;
&lt;li&gt;加载包含目标记录的叶子页面，并检查每条记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;总共约需 4 次 I/O，而无序文件中线性扫描的 I/O 成本可达 70,176 次​。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="数据库" scheme="http://example.com/categories/computer/database/" />
        <updated>2024-11-03T06:43:43.187Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/11/03/computer/database/final%E5%A4%8D%E4%B9%A002/</id>
        <title>final复习02</title>
        <link rel="alternate" href="http://example.com/2024/11/03/computer/database/final%E5%A4%8D%E4%B9%A002/"/>
        <content type="html">&lt;h2 id=&#34;e-r图和r-m图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#e-r图和r-m图&#34;&gt;#&lt;/a&gt; E-R 图和 R-M 图&lt;/h2&gt;
&lt;h2 id=&#34;e-r图和r-m图-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#e-r图和r-m图-2&#34;&gt;#&lt;/a&gt; E-R 图和 R-M 图&lt;/h2&gt;
&lt;h3 id=&#34;思维导图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思维导图&#34;&gt;#&lt;/a&gt; 思维导图&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2F%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241029224733.jpg&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;继承关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承关系&#34;&gt;#&lt;/a&gt; 继承关系&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2F%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细节&#34;&gt;#&lt;/a&gt; 细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;各种线段&lt;br&gt;
粗实线：表示至少有一个&lt;br&gt;
细实线：表示 0-n&lt;br&gt;
 粗箭头：表示有且仅有一个&lt;/li&gt;
&lt;li&gt;E-R 图细节&lt;br&gt;
如果有某个实体依赖于另一个实体，这个实体为弱实体，此实体主键需要画虚线。&lt;br&gt;
如果某个属性为多值属性，此属性绘画时需要标注为弱属性，两个圈表示；如果某个属性为复合型属性，即包含 (address,postcode,etc..)，此属性绘画时需要画出包含的属性。&lt;/li&gt;
&lt;li&gt;E-R 图转 R-M 图&lt;br&gt;
在 E-R 图中，如 N-1 的关系，N 的一方需要在 R-M 图中添加外键到 1 的一方的 PK。如果某个关系为 m-n，R-M 图中需要新建一个关系表来表示；如果为三元关系同理也需要，此时新表包含三个 &amp;amp; 两个表的主键，同时也是外键。某个关系包含属性时，此关系也需要重新建表，且包含两个属性的主键。&lt;br&gt;
多值属性在转 RM 时也需要重新建一张表，但是复合型属性需要删除，同时子属性不删除。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="数据库" scheme="http://example.com/categories/computer/database/" />
        <updated>2024-11-03T06:43:40.324Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/30/game-engine/unity/unityProject01/unity%20%E5%8A%A8%E6%80%81%E8%A1%80%E6%9D%A1/</id>
        <title>unity血条</title>
        <link rel="alternate" href="http://example.com/2024/10/30/game-engine/unity/unityProject01/unity%20%E5%8A%A8%E6%80%81%E8%A1%80%E6%9D%A1/"/>
        <content type="html">&lt;h2 id=&#34;使用slider模拟血条效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用slider模拟血条效果&#34;&gt;#&lt;/a&gt; 使用 slider 模拟血条效果&lt;/h2&gt;
&lt;h3 id=&#34;1ui中如何创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1ui中如何创建&#34;&gt;#&lt;/a&gt; 1.UI 中如何创建&lt;/h3&gt;
&lt;p&gt;右键 UI 中直接创建 Slider&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity%2Funity2d%2FhandleSlide.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity/unity2d/slider_handleSlide.png&#34; alt&gt;&lt;br&gt;
创建 Slider 后会自动生成这个滚动条，在血条中不需要，可以删除&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity/unity2d/slider.png&#34; alt&gt;&lt;br&gt;
实际上控制填充条的多少就是由 Value 来控制的&lt;/p&gt;
&lt;p&gt;然后在 Background 的 Image 中放入边框 UI 图标，然后在 Fill Area 中的 Fill 的 Image 里放入填充 UI 图&lt;/p&gt;
&lt;h3 id=&#34;2-脚本控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-脚本控制&#34;&gt;#&lt;/a&gt; 2. 脚本控制&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UI_HealthBar.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine.UI;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 管理UI血条的类，用于显示实体的生命值和镜像翻转UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UI_HealthBar&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 引用实体对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Entity entity;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 引用角色属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; CharacterStats myStats;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 血条的UI RectTransform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; RectTransform myTransform;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 血条的Slider组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Slider slider;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 目标生命值，用于实现平滑的血条过渡&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; targetHealth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化方法，绑定事件并设置初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取血条的 RectTransform 组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        myTransform = GetComponent&amp;lt;RectTransform&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取父对象中的实体脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        entity = GetComponentInParent&amp;lt;Entity&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取子对象中的 Slider 组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slider = GetComponentInChildren&amp;lt;Slider&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取父对象中的角色属性脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        myStats = GetComponentInParent&amp;lt;CharacterStats&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 绑定实体翻转事件，用于镜像翻转血条&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        entity.onFlipped += FlipUI;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 绑定生命值变化事件，用于更新血条&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        myStats.onHealthChanged += UpdateHealthUI;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化 Slider 的最大值为角色的最大生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slider.maxValue = myStats.GetMaxHealthValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化目标生命值为角色当前生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetHealth = myStats.currentHealth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置 Slider 的初始值为目标生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slider.&lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt; = targetHealth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 每帧更新，用于平滑血条的过渡动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 使用 Mathf.Lerp 实现血条值的平滑变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slider.&lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt; = Mathf.Lerp(slider.&lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;, targetHealth, Time.deltaTime * &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 更新血条的UI（响应生命值变化事件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UpdateHealthUI&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 更新 Slider 的最大值为角色的最大生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slider.maxValue = myStats.GetMaxHealthValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将目标生命值更新为角色当前生命值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetHealth = myStats.currentHealth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 翻转血条的UI（响应实体翻转事件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FlipUI&lt;/span&gt;()&lt;/span&gt; =&amp;gt; myTransform.Rotate(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 当对象被禁用时，解绑事件以避免错误调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDisable&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 解绑实体翻转事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        entity.onFlipped -= FlipUI;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 解绑生命值变化事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        myStats.onHealthChanged -= UpdateHealthUI;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2024-10-30T13:14:05.606Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/30/game-engine/unity/unityProject01/unity-2d%20%E5%AE%9E%E7%8E%B0%E8%BD%AC%E5%90%91%E4%B8%8E%E8%B7%B3%E8%B7%83%E9%99%90%E5%88%B6/</id>
        <title>unity-2d 实现转向与跳跃限制</title>
        <link rel="alternate" href="http://example.com/2024/10/30/game-engine/unity/unityProject01/unity-2d%20%E5%AE%9E%E7%8E%B0%E8%BD%AC%E5%90%91%E4%B8%8E%E8%B7%B3%E8%B7%83%E9%99%90%E5%88%B6/"/>
        <content type="html">&lt;h2 id=&#34;unity-2d-转向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unity-2d-转向&#34;&gt;#&lt;/a&gt; unity-2d 转向&lt;/h2&gt;
&lt;p&gt;首先，unity-2d 其实也处于一个 3d 的世界当中，只不过所有的元素都是平面状的，所以，我们可以通过改变方向到 180 度来实现人物转向功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建变量&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; facingDir = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 面向方向（1为右，-1为左）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; facingRight = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 是否朝右&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; xinput;  &lt;span class=&#34;comment&#34;&gt;// 水平方向输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;然后，创建反转角色函数&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ROW&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 角色翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Flip&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    facingDir = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt; * facingDir;  &lt;span class=&#34;comment&#34;&gt;// 反转面向方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    facingRight = !facingRight;  &lt;span class=&#34;comment&#34;&gt;// 切换朝向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform.Rotate(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 旋转角色，使其面向另一方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;控制翻转行为&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 控制翻转行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FlipController&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rb.velocity.x &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !facingRight)  &lt;span class=&#34;comment&#34;&gt;// 如果角色向右移动且当前面朝左&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Flip();  &lt;span class=&#34;comment&#34;&gt;// 执行翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rb.velocity.x &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; facingRight)  &lt;span class=&#34;comment&#34;&gt;// 如果角色向左移动且当前面朝右&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Flip();  &lt;span class=&#34;comment&#34;&gt;// 执行翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;unity-2d-限制跳跃次数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unity-2d-限制跳跃次数&#34;&gt;#&lt;/a&gt; unity-2d 限制跳跃次数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建新的变量与标头，使可读性更高&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;碰撞检测信息&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; groundCheckDistance;  &lt;span class=&#34;comment&#34;&gt;// 地面检测距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; LayerMask whatIsGround;  &lt;span class=&#34;comment&#34;&gt;// 表示地面的层级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isGrounded;  &lt;span class=&#34;comment&#34;&gt;// 是否在地面上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;碰撞检测&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 碰撞检测（检测是否在地面上）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CollisionChecks&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    isGrounded = Physics2D.Raycast(transform.position, Vector2.down, groundCheckDistance, whatIsGround);  &lt;span class=&#34;comment&#34;&gt;// 投射射线检测地面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 绘制Gizmos，用于显示射线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDrawGizmos&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Gizmos.DrawLine(transform.position, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(transform.position.x, transform.position.y - groundCheckDistance));  &lt;span class=&#34;comment&#34;&gt;// 在编辑器中显示检测射线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限制 jump 行为&lt;br&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Jump&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isGrounded)  &lt;span class=&#34;comment&#34;&gt;// 检查是否在地面上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rb.velocity = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(rb.velocity.x, jumpforce);  &lt;span class=&#34;comment&#34;&gt;// 添加向上的跳跃力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 在 c# 中，只有一行的 if 语句是可以直接写的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Physics2D.Raycast 函数使用：&lt;br&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;RaycastHit2D hitInfo = Physics2D.Raycast(origin, direction, distance, layerMask);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参数详解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;origin (Vector2)&lt;/strong&gt; - 射线的起点。
&lt;ul&gt;
&lt;li&gt;通常用物体的位置，比如  &lt;code&gt;transform.position&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;direction (Vector2)&lt;/strong&gt; - 射线的方向。
&lt;ul&gt;
&lt;li&gt;这是一个二维向量，表示射线的投射方向。例如， &lt;code&gt;Vector2.down&lt;/code&gt;  表示向下， &lt;code&gt;Vector2.right&lt;/code&gt;  表示向右。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;distance (float)&lt;/strong&gt; - 射线的最大检测距离（可选参数）。
&lt;ul&gt;
&lt;li&gt;这个参数设定了射线的长度。如果射线超过这个长度没有检测到任何碰撞物，就会返回一个空的  &lt;code&gt;RaycastHit2D&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;layerMask (int)&lt;/strong&gt; - 层掩码 (LayerMask)（可选参数）。
&lt;ul&gt;
&lt;li&gt;用来指定射线可以检测的层（Layer）。如果只想检测特定的物体，比如地面或墙壁，可以用  &lt;code&gt;LayerMask&lt;/code&gt;  来过滤掉其他不相关的物体。&lt;/li&gt;
&lt;li&gt;例如， &lt;code&gt;LayerMask.GetMask(&amp;quot;Ground&amp;quot;)&lt;/code&gt;  可以创建一个只检测 &amp;quot;Ground&amp;quot; 层的掩码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;代码总览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码总览&#34;&gt;#&lt;/a&gt; 代码总览&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;player&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;MonoBehaviour&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 定义变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Rigidbody2D rb;  &lt;span class=&#34;comment&#34;&gt;// 2D刚体，用于物理控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Animator animator;  &lt;span class=&#34;comment&#34;&gt;// 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; moveSpeed;  &lt;span class=&#34;comment&#34;&gt;// 移动速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; jumpforce;  &lt;span class=&#34;comment&#34;&gt;// 跳跃力度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; facingDir = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 面向方向（1为右，-1为左）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; facingRight = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 是否朝右&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; xinput;  &lt;span class=&#34;comment&#34;&gt;// 水平方向输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Header(&lt;span class=&#34;string&#34;&gt;&amp;quot;碰撞检测信息&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt; groundCheckDistance;  &lt;span class=&#34;comment&#34;&gt;// 地面检测距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;SerializeField&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; LayerMask whatIsGround;  &lt;span class=&#34;comment&#34;&gt;// 表示地面的层级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isGrounded;  &lt;span class=&#34;comment&#34;&gt;// 是否在地面上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Start方法在游戏开始时调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Start&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rb = GetComponent&amp;lt;Rigidbody2D&amp;gt;();  &lt;span class=&#34;comment&#34;&gt;// 获取2D刚体组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        animator = GetComponentInChildren&amp;lt;Animator&amp;gt;();  &lt;span class=&#34;comment&#34;&gt;// 获取子对象中的动画组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Update方法在每帧调用一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Movement();  &lt;span class=&#34;comment&#34;&gt;// 控制角色移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CheckInput();  &lt;span class=&#34;comment&#34;&gt;// 检查玩家输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CollisionChecks();  &lt;span class=&#34;comment&#34;&gt;// 碰撞检测（是否在地面上）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        FlipController();  &lt;span class=&#34;comment&#34;&gt;// 控制角色翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        AnimatorController();  &lt;span class=&#34;comment&#34;&gt;// 控制动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 检查玩家输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CheckInput&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        xinput = Input.GetAxisRaw(&lt;span class=&#34;string&#34;&gt;&amp;quot;Horizontal&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 获取水平输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (Input.GetKeyDown(KeyCode.Space))  &lt;span class=&#34;comment&#34;&gt;// 检测空格键跳跃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Jump();  &lt;span class=&#34;comment&#34;&gt;// 执行跳跃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Debug.Log(&lt;span class=&#34;string&#34;&gt;&amp;quot;jump&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 输出跳跃信息到控制台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 控制角色移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Movement&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 更新角色的水平速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rb.velocity = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(xinput * moveSpeed, rb.velocity.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 跳跃方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Jump&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isGrounded)  &lt;span class=&#34;comment&#34;&gt;// 检查是否在地面上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rb.velocity = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector2(rb.velocity.x, jumpforce);  &lt;span class=&#34;comment&#34;&gt;// 添加向上的跳跃力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 控制动画状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AnimatorController&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; moving = rb.velocity.x != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 判断角色是否在移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        animator.SetBool(&lt;span class=&#34;string&#34;&gt;&amp;quot;moving&amp;quot;&lt;/span&gt;, moving);  &lt;span class=&#34;comment&#34;&gt;// 设置动画的&amp;quot;moving&amp;quot;参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 角色翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Flip&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        facingDir = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt; * facingDir;  &lt;span class=&#34;comment&#34;&gt;// 反转面向方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        facingRight = !facingRight;  &lt;span class=&#34;comment&#34;&gt;// 切换朝向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transform.Rotate(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 旋转角色，使其面向另一方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 控制翻转行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FlipController&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rb.velocity.x &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !facingRight)  &lt;span class=&#34;comment&#34;&gt;// 如果角色向右移动且当前面朝左&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Flip();  &lt;span class=&#34;comment&#34;&gt;// 执行翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rb.velocity.x &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; facingRight)  &lt;span class=&#34;comment&#34;&gt;// 如果角色向左移动且当前面朝右&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Flip();  &lt;span class=&#34;comment&#34;&gt;// 执行翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 碰撞检测（检测是否在地面上）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CollisionChecks&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        isGrounded = Physics2D.Raycast(transform.position, Vector2.down, groundCheckDistance, whatIsGround);  &lt;span class=&#34;comment&#34;&gt;// 投射射线检测地面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 绘制Gizmos，用于显示射线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDrawGizmos&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Gizmos.DrawLine(transform.position, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector3(transform.position.x, transform.position.y - groundCheckDistance));  &lt;span class=&#34;comment&#34;&gt;// 在编辑器中显示检测射线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="从零开始的恶魔城开发" scheme="http://example.com/categories/game-engine/unity/unityProject01/" />
        <updated>2024-10-30T12:32:19.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/29/computer/database/final%E5%A4%8D%E4%B9%A001/</id>
        <title>final复习01</title>
        <link rel="alternate" href="http://example.com/2024/10/29/computer/database/final%E5%A4%8D%E4%B9%A001/"/>
        <content type="html">&lt;h2 id=&#34;e-r图和r-m图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#e-r图和r-m图&#34;&gt;#&lt;/a&gt; E-R 图和 R-M 图&lt;/h2&gt;
&lt;h2 id=&#34;e-r图和r-m图-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#e-r图和r-m图-2&#34;&gt;#&lt;/a&gt; E-R 图和 R-M 图&lt;/h2&gt;
&lt;h3 id=&#34;思维导图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思维导图&#34;&gt;#&lt;/a&gt; 思维导图&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2F%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241029224733.jpg&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;继承关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承关系&#34;&gt;#&lt;/a&gt; 继承关系&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database%2F%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细节&#34;&gt;#&lt;/a&gt; 细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;各种线段&lt;br&gt;
粗实线：表示至少有一个&lt;br&gt;
细实线：表示 0-n&lt;br&gt;
 粗箭头：表示有且仅有一个&lt;/li&gt;
&lt;li&gt;E-R 图细节&lt;br&gt;
如果有某个实体依赖于另一个实体，这个实体为弱实体，此实体主键需要画虚线。&lt;br&gt;
如果某个属性为多值属性，此属性绘画时需要标注为弱属性，两个圈表示；如果某个属性为复合型属性，即包含 (address,postcode,etc..)，此属性绘画时需要画出包含的属性。&lt;/li&gt;
&lt;li&gt;E-R 图转 R-M 图&lt;br&gt;
在 E-R 图中，如 N-1 的关系，N 的一方需要在 R-M 图中添加外键到 1 的一方的 PK。如果某个关系为 m-n，R-M 图中需要新建一个关系表来表示；如果为三元关系同理也需要，此时新表包含三个 &amp;amp; 两个表的主键，同时也是外键。某个关系包含属性时，此关系也需要重新建表，且包含两个属性的主键。&lt;br&gt;
多值属性在转 RM 时也需要重新建一张表，但是复合型属性需要删除，同时子属性不删除。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="数据库" scheme="http://example.com/categories/computer/database/" />
        <updated>2024-10-28T23:43:19.078Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/28/computer/networks/network_lec_7%20Design%20ofNetworks%20and%20DistributedSystems/</id>
        <title>lecture_7 Design ofNetworks and DistributedSystems</title>
        <link rel="alternate" href="http://example.com/2024/10/28/computer/networks/network_lec_7%20Design%20ofNetworks%20and%20DistributedSystems/"/>
        <content type="html">&lt;h2 id=&#34;数据平面data-plane&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据平面data-plane&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label danger&#34;&gt;数据平面（Data Plane）&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-数据平面的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-数据平面的功能&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;数据平面的功能&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;数据平面在每个路由器上本地执行，负责将进入路由器的分组从输入端口转发到正确的输出端口。核心任务是根据路由表决定每个数据包的转发路径​。&lt;/p&gt;
&lt;h3 id=&#34;2-转发表forwarding-table&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-转发表forwarding-table&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;转发表（Forwarding Table）&lt;/strong&gt;：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;每个路由器的转发表决定了数据包的转发规则。数据平面根据数据包头中的字段值（如目的IP地址）匹配相应规则，并执行相应的操作，如转发到特定端口或丢弃​。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-openflow和流表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-openflow和流表&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;OpenFlow 和流表&lt;/strong&gt;：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在SDN架构中，数据平面使用OpenFlow等协议支持的流表（Flow Table），可以灵活定义转发规则。流表包含匹配字段、操作（例如转发、丢弃、修改）和计数器。控制器根据网络状态动态下发这些规则，以适应网络需求​.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2F%E8%BD%AC%E5%8F%91%E8%A1%A8.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2F%E8%BD%AC%E5%8F%91%E8%A1%A8%E7%A4%BA%E4%BE%8B.png&#34; alt&gt;&lt;br&gt;
如上图我们可以看到&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Destination-based forwarding（基于目标地址的转发）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;匹配条件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;目标 IP 地址为  &lt;code&gt;51.6.0.8&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;其他字段使用通配符  &lt;code&gt;*&lt;/code&gt; ，表示任何值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;动作是将符合条件的数据包转发到端口  &lt;code&gt;port6&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释&lt;/strong&gt;：这个规则的作用是，当数据包的目标地址为  &lt;code&gt;51.6.0.8&lt;/code&gt;  时，将该数据包转发到交换机的端口 6。这样可以确保发往该地址的数据包沿着预设路径传输，通常用于路由数据包到特定的目的地。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Firewall（防火墙规则）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;规则 1&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配条件：TCP 的目标端口为  &lt;code&gt;22&lt;/code&gt; （通常用于 SSH 连接）。&lt;/li&gt;
&lt;li&gt;其他字段使用通配符  &lt;code&gt;*&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：丢弃数据包（drop）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释&lt;/strong&gt;：这个规则的目的是阻止所有目标端口为 22 的数据包，起到屏蔽 SSH 流量的作用。这种规则通常用于限制对特定服务的访问，以增强网络的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;规则 2&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配条件：源 IP 地址为  &lt;code&gt;128.119.1.1&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;其他字段使用通配符  &lt;code&gt;*&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：丢弃数据包（drop）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释&lt;/strong&gt;：此规则阻止所有来自  &lt;code&gt;128.119.1.1&lt;/code&gt;  主机的流量。可能用于封锁特定设备或网络源的访问，防止来自该源的恶意流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-通用转发generalized-forwarding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-通用转发generalized-forwarding&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;通用转发（Generalized Forwarding）&lt;/strong&gt;：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;通用转发允许更细粒度的规则定义，例如基于源/目的IP地址、端口号等字段来处理数据包。这一机制使得数据平面可以灵活地执行各种操作，不仅限于简单的IP转发​。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;控制平面control-plane&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制平面control-plane&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label danger&#34;&gt;控制平面（Control Plane）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在 SDN（软件定义网络）中，** 控制平面（Control Plane）** 负责网络的逻辑控制和管理决策，是 SDN 架构的核心部分。它与数据平面（Data Plane）分离，使网络管理更加灵活和集中化。以下是控制平面的主要内容：&lt;/p&gt;
&lt;h3 id=&#34;1-控制平面的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-控制平面的功能&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;控制平面的功能&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路由决策&lt;/strong&gt;：控制平面负责计算最佳路径，将路径信息下发给数据平面。例如，它决定不同数据包通过的路径，以达到最优的流量管理和资源利用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略管理&lt;/strong&gt;：控制平面可以根据业务需求或策略规定数据包的处理方式。例如，它可以定义哪些数据包需要优先处理、哪些流量要进行限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集中控制&lt;/strong&gt;：在 SDN 中，控制平面通常由一个集中控制器（如 OpenDaylight、ONOS 等）实现。这个集中控制器管理整个网络的规则和策略，为各个交换机和路由器提供统一的控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-控制器与数据平面的交互&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-控制器与数据平面的交互&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;控制器与数据平面的交互&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenFlow 协议&lt;/strong&gt;：控制平面通常通过 OpenFlow 协议与数据平面交换机和路由器通信。控制器通过下发流表规则，告知交换机如何处理不同的数据包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流表规则的下发与更新&lt;/strong&gt;：控制平面根据实时网络状态下发或更新流表规则，控制数据包的转发路径。例如，当检测到拥塞时，控制器可以重新配置流表，将流量分配到其他路径上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-网络拓扑的发现和监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-网络拓扑的发现和监控&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;网络拓扑的发现和监控&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拓扑发现&lt;/strong&gt;：控制平面可以监控网络中设备的连接关系，自动生成和更新网络拓扑图。这使得控制器可以实时了解网络的结构，并在路径规划时考虑网络设备的物理位置和连接情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能监控和故障检测&lt;/strong&gt;：控制平面可以采集网络中各设备的状态信息（如流量负载、延迟），并根据监控数据检测故障。例如，如果某条路径出现故障，控制平面可以迅速重新规划路径，将流量重新路由到其他可用路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-控制平面的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-控制平面的优势&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;控制平面的优势&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集中化管理&lt;/strong&gt;：控制平面将网络的控制逻辑集中在控制器上，使网络管理和策略应用变得更加统一和简便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态适应性&lt;/strong&gt;：控制平面可以根据实时数据和业务需求，动态调整网络配置和流量分配。比如，它可以自动调整流量优先级，以确保关键应用的带宽需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易扩展性&lt;/strong&gt;：通过控制平面，网络管理员可以灵活地添加新规则，满足不断变化的网络需求，适应大规模和复杂的网络环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-典型应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-典型应用场景&#34;&gt;#&lt;/a&gt; 5. &lt;strong&gt;典型应用场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量工程&lt;/strong&gt;：控制平面可以根据网络负载情况，动态调整数据包的转发路径，平衡流量负载，优化资源使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络安全&lt;/strong&gt;：控制器可以检测异常流量或攻击行为，快速应用安全策略（如阻断恶意流量或隔离受感染设备）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务质量（QoS）管理&lt;/strong&gt;：控制平面可以确保高优先级业务（如视频会议）的带宽需求，同时限制低优先级业务，以提供更好的服务质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2F%E6%8E%A7%E5%88%B6%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E7%A4%BA%E4%BE%8B.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;示例解读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例解读&#34;&gt;#&lt;/a&gt; 示例解读&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路故障检测&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在图中， &lt;code&gt;S1&lt;/code&gt;  交换机检测到与  &lt;code&gt;S2&lt;/code&gt;  之间的链路发生故障（红色链接）。通过 OpenFlow 协议， &lt;code&gt;S1&lt;/code&gt;  发送一个端口状态消息（port status message）给 SDN 控制器，通知链路状态的变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制器接收故障消息&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDN 控制器收到来自  &lt;code&gt;S1&lt;/code&gt;  的 OpenFlow 消息，并更新链路状态信息。控制器在内存中维护网络拓扑和链路状态，这样它可以根据最新的网络状态做出决策。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;触发路由算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在控制器中，Dijkstra’s link-state Routing（Dijkstra 链路状态路由算法）应用程序已经预先注册，以便在链路状态变化时被调用。当控制器更新链路状态后，自动调用该路由算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重新计算路由&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra 路由算法访问控制器中的网络图信息和链路状态信息，并计算新的路由。该算法会考虑网络中其他节点和链路的状态，以找到从源到目的地的最优路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更新流表&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的路由计算完成后，控制器会生成更新后的流表，并通过 OpenFlow 协议下发到各个相关交换机（如  &lt;code&gt;S1&lt;/code&gt; 、 &lt;code&gt;S2&lt;/code&gt; 、 &lt;code&gt;S3&lt;/code&gt;  等）。这些交换机会根据新的流表规则调整数据包的转发路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据恢复&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦流表更新完成，网络中的流量将按照新路径进行传输，确保数据流在故障恢复后的最短时间内继续传输，从而实现网络的动态修复和负载均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键要点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenFlow 协议&lt;/strong&gt;：控制器和交换机之间的通信依赖 OpenFlow 协议。交换机将链路故障等事件上报给控制器，控制器下发新的流表规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链路状态路由&lt;/strong&gt;：Dijkstra 算法是一种链路状态路由算法，可以快速计算最优路径。控制器利用该算法在网络故障时重新计算路径，确保网络的高效运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集中控制&lt;/strong&gt;：在 SDN 架构中，控制器充当了网络的 “中枢神经”，统一管理和协调网络的各个设备，实现了传统网络难以实现的快速恢复和灵活路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transport-services传输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#transport-services传输服务&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label danger&#34;&gt;Transport Services（传输服务）&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-传输层的主要功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-传输层的主要功能&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;传输层的主要功能&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程到进程的通信&lt;/strong&gt;：传输层提供应用进程之间的通信服务。不同于网络层提供的主机到主机的通信，传输层能够识别主机上具体的应用进程（如通过端口号），从而实现进程间的直接通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用与多路分解&lt;/strong&gt;：通过端口号，传输层可以支持多个应用程序在同一主机上同时使用网络通信。这使得来自不同应用的数据可以被正确地分解并发送给合适的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-传输层的核心服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-传输层的核心服务&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;传输层的核心服务&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;传输层提供了两种主要的服务类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;面向连接的服务（例如 TCP）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠数据传输&lt;/strong&gt;：TCP 通过确认（ACK）、重传（retransmission）等机制确保数据包在传输中不丢失、不重复、按顺序到达。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量控制&lt;/strong&gt;：TCP 实现流量控制，以防止发送方发送的数据过多，超出接收方的处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;：TCP 还提供拥塞控制功能，监测网络拥塞状态，动态调整发送速率，以避免网络拥堵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接管理&lt;/strong&gt;：在数据传输前，TCP 使用三次握手建立连接，并在传输完成后使用四次挥手释放连接，确保端到端的可靠连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无连接的服务（例如 UDP）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尽最大努力交付&lt;/strong&gt;：UDP 不保证数据包的可靠传输，不使用重传机制，数据可能丢失、重复或乱序到达。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低延迟&lt;/strong&gt;：UDP 因为不保证可靠性和顺序性，传输过程简单，因此传输延迟较低，适合对实时性要求较高的应用，如视频流和在线游戏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无连接传输&lt;/strong&gt;：UDP 不建立连接，数据包可直接发送给目标，减少了连接建立的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-传输服务的典型应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-传输服务的典型应用场景&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;传输服务的典型应用场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP 的应用场景&lt;/strong&gt;：适用于对数据完整性和可靠性有较高要求的应用，如网页浏览（HTTP）、电子邮件（SMTP）、文件传输（FTP）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 的应用场景&lt;/strong&gt;：适用于实时性更高的应用，如视频会议、在线游戏、DNS 查询等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-qos服务质量支持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-qos服务质量支持&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;QoS（服务质量）支持&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;传输服务还可以在一定程度上支持 QoS 需求，例如，通过设置不同的优先级或带宽控制来满足不同应用的传输要求。&lt;/li&gt;
&lt;li&gt;对于实时应用，UDP 通常优于 TCP，因为它减少了传输开销和延迟，但无法提供可靠性保障。TCP 则通过其可靠性和流量控制特性，适合需要数据完整性的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label danger&#34;&gt;UDP&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&#34;1-udp的主要特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-udp的主要特性&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;UDP 的主要特性&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无连接&lt;/strong&gt;：UDP 是无连接的传输协议，发送数据前无需建立连接，接收方也无需确认。发送方可以直接将数据报发送到目标端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可靠传输&lt;/strong&gt;：UDP 不保证数据报的可靠性，即数据可能丢失、重复、或乱序到达。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无重传机制&lt;/strong&gt;：UDP 不实现重传机制，丢失的数据不会再次发送，这减少了延迟和开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单的头部结构&lt;/strong&gt;：UDP 的数据包头部很简单，仅包含源端口、目的端口、数据长度和校验和等少量信息，使得它的开销小、处理快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-udp头部结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-udp头部结构&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;UDP 头部结构&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源端口（Source Port）&lt;/strong&gt;：可选项，表示数据包的发送端口，方便接收端识别数据的来源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的端口（Destination Port）&lt;/strong&gt;：必选项，表示数据包的接收端口，接收方根据此端口号将数据包分发到相应的应用进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长度（Length）&lt;/strong&gt;：UDP 报文的总长度，包括头部和数据部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;校验和（Checksum）&lt;/strong&gt;：用于检验数据的完整性，但不提供纠错功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-udp的多路复用和多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-udp的多路复用和多路分解&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;UDP 的多路复用和多路分解&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多路复用（Multiplexing）&lt;/strong&gt;：多个应用程序在同一主机上可以使用不同的 UDP 端口号向网络发送数据。每个数据包通过一个特定的 UDP 端口发送，确保发送端的数据流可以正确地传输到接收方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路分解（Demultiplexing）&lt;/strong&gt;：接收方的传输层通过数据包的目的端口号，将收到的数据包分配给相应的应用进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于端口的分解&lt;/strong&gt;：UDP 的多路分解仅依赖于目的端口号，而不考虑源 IP 或源端口。这意味着不同的源可以通过相同的目的端口号将数据发送给同一个接收进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-udp的典型应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-udp的典型应用场景&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;UDP 的典型应用场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实时应用&lt;/strong&gt;：如视频会议、IP 电话、在线游戏等应用。它们对延迟敏感且要求数据尽快到达，丢包不会严重影响体验，因此更适合使用 UDP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广播和多播&lt;/strong&gt;：UDP 支持广播和多播，可以将数据同时发送给多个接收方，适合用于局域网中的发现服务（如 DHCP、UPnP 等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化的传输需求&lt;/strong&gt;：如 DNS 查询、SNMP 等应用，只需发送小数据量且无需重传。丢包对这些应用影响较小，因此它们更适合使用 UDP。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-udp的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-udp的优缺点&#34;&gt;#&lt;/a&gt; 5. &lt;strong&gt;UDP 的优缺点&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;低延迟&lt;/strong&gt;：无连接、无重传的特性使得 UDP 传输延迟低，适合实时应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单高效&lt;/strong&gt;：头部结构简单，数据处理开销小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持广播 / 多播&lt;/strong&gt;：便于在局域网中进行资源发现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不可靠&lt;/strong&gt;：无重传和确认机制，数据可能丢失或乱序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无流量控制和拥塞控制&lt;/strong&gt;：可能导致网络拥堵或过载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-udp和tcp的对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-udp和tcp的对比&#34;&gt;#&lt;/a&gt; 6. &lt;strong&gt;UDP 和 TCP 的对比&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：TCP 提供可靠传输和重传机制，而 UDP 不保证数据的传输可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：UDP 延迟更低，因为它无需建立连接和等待确认。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据顺序&lt;/strong&gt;：TCP 保证数据按序到达，UDP 则不保证顺序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：TCP 适用于需要可靠性、数据完整性的应用，如文件传输、网页浏览；UDP 适用于对实时性要求高、允许丢包的应用，如视频流和 DNS 查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label danger&#34;&gt;TCP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在传输层协议中，**TCP（Transmission Control Protocol，传输控制协议）** 是一种面向连接、可靠的传输协议。与 UDP 相比，TCP 提供了数据的可靠传输、流量控制和拥塞控制，是大多数对数据完整性要求较高的应用的首选协议。以下是 TCP 部分的核心内容：&lt;/p&gt;
&lt;h3 id=&#34;1-tcp的主要特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-tcp的主要特性&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;TCP 的主要特性&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt;：TCP 是面向连接的协议，数据传输前需要建立连接。TCP 通过三次握手建立连接，并通过四次挥手断开连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠传输&lt;/strong&gt;：TCP 通过确认（ACK）、重传机制确保数据不丢失、不重复、按顺序到达接收方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有序传输&lt;/strong&gt;：TCP 对数据包进行编号（序列号），接收方根据序列号将数据包按正确的顺序排列，从而保证数据的有序性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全双工通信&lt;/strong&gt;：TCP 支持全双工通信，允许通信双方在同一时间内发送和接收数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量控制&lt;/strong&gt;：TCP 使用滑动窗口机制进行流量控制，确保发送方的发送速率不会超出接收方的接收能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;：TCP 具有拥塞控制机制，通过动态调整发送速率来防止网络拥塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-tcp连接的建立和断开&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-tcp连接的建立和断开&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;TCP 连接的建立和断开&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三次握手（Three-Way Handshake）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;连接建立时，TCP 使用三次握手协议。&lt;/li&gt;
&lt;li&gt;第一步：客户端向服务器发送 SYN（同步）请求。&lt;/li&gt;
&lt;li&gt;第二步：服务器收到 SYN 后，返回一个 SYN-ACK（同步确认）。&lt;/li&gt;
&lt;li&gt;第三步：客户端收到 SYN-ACK 后，再发送一个 ACK，连接正式建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;四次挥手（Four-Way Teardown）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;连接断开时，TCP 使用四次挥手协议。&lt;/li&gt;
&lt;li&gt;第一步：客户端向服务器发送 FIN（终止）请求。&lt;/li&gt;
&lt;li&gt;第二步：服务器收到 FIN 后，返回一个 ACK，表示收到。&lt;/li&gt;
&lt;li&gt;第三步：服务器在处理完数据后，发送 FIN 请求。&lt;/li&gt;
&lt;li&gt;第四步：客户端返回 ACK，连接正式断开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-tcp的可靠性机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-tcp的可靠性机制&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;TCP 的可靠性机制&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列号（Sequence Number）&lt;/strong&gt;：TCP 为每个字节分配一个序列号，以确保数据按顺序到达。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认应答（ACK）&lt;/strong&gt;：接收方在接收到数据后，向发送方发送确认信息（ACK），告知发送方数据已成功接收。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重传机制&lt;/strong&gt;：如果发送方在超时时间内未收到 ACK，则会重传数据。TCP 根据网络状态调整超时时间，确保数据可靠传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口机制&lt;/strong&gt;：TCP 通过窗口机制一次可以发送多个字节的数据，窗口大小取决于接收方的接收能力和网络状况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-tcp的流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-tcp的流量控制&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;TCP 的流量控制&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;滑动窗口（Sliding Window）&lt;/strong&gt;：TCP 使用滑动窗口机制进行流量控制，窗口大小代表了发送方在未接收到 ACK 前可以发送的最大数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口调整&lt;/strong&gt;：接收方通过通告窗口（Advertised Window）来控制发送方的发送速率。接收方在 ACK 中通告自己的接收窗口大小，发送方根据该窗口调整发送数据的量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：流量控制确保发送方不会淹没接收方的缓冲区，避免接收方因接收速度不足而丢失数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-tcp的拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-tcp的拥塞控制&#34;&gt;#&lt;/a&gt; 5. &lt;strong&gt;TCP 的拥塞控制&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拥塞窗口（Congestion Window，cwnd）&lt;/strong&gt;：TCP 维护一个拥塞窗口，该窗口根据网络拥塞情况动态变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;慢启动（Slow Start）&lt;/strong&gt;：在连接开始时，TCP 使用慢启动算法，逐步增加拥塞窗口，探测可用带宽。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免（Congestion Avoidance）&lt;/strong&gt;：当拥塞窗口达到阈值后，进入拥塞避免阶段，窗口以线性速度增长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速重传和快速恢复&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速重传&lt;/strong&gt;：当发送方收到三个重复的 ACK 时，认为该数据段丢失，立即重传而不等待超时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速恢复&lt;/strong&gt;：在快速重传后，TCP 直接进入拥塞避免阶段，避免回到慢启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-tcp的典型应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-tcp的典型应用场景&#34;&gt;#&lt;/a&gt; 6. &lt;strong&gt;TCP 的典型应用场景&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件传输&lt;/strong&gt;（如 FTP）：文件传输要求数据的完整性和顺序性，TCP 的可靠性和流量控制确保数据无丢失和按序到达。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网页浏览&lt;/strong&gt;（如 HTTP/HTTPS）：网页浏览要求数据可靠传输，以确保页面内容完整。TCP 的可靠性和流量控制能够确保用户得到完整的网页内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;电子邮件&lt;/strong&gt;（如 SMTP）：电子邮件传输需要数据的完整性和正确性，因此 TCP 的可靠传输特性非常适合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-tcp的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-tcp的优缺点&#34;&gt;#&lt;/a&gt; 7. &lt;strong&gt;TCP 的优缺点&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠传输&lt;/strong&gt;：保证数据按顺序到达且不会丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量和拥塞控制&lt;/strong&gt;：适应不同的网络状况，防止网络拥堵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有序性&lt;/strong&gt;：数据按顺序到达，适用于大多数需要数据完整性的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开销较高&lt;/strong&gt;：TCP 头部较复杂，且维护连接状态会增加开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟较高&lt;/strong&gt;：TCP 的三次握手和确认机制增加了延迟，不适合对实时性要求较高的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-tcp和udp的对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-tcp和udp的对比&#34;&gt;#&lt;/a&gt; 8. &lt;strong&gt;TCP 和 UDP 的对比&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：TCP 提供可靠传输，UDP 不保证可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：UDP 延迟更低，而 TCP 由于需要建立连接和确认机制，延迟较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：TCP 适用于需要可靠传输的应用，如文件传输和网页浏览；UDP 适用于对实时性要求高的应用，如视频流和 DNS 查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;TCP 提供了一套复杂而强大的机制，确保数据的可靠传输。通过连接管理、确认机制、流量控制和拥塞控制，TCP 在需要数据完整性的场景下发挥了关键作用。TCP 的可靠性使其成为大多数网络应用（如 HTTP、FTP 和 SMTP）的首选协议。&lt;/p&gt;
&lt;h2 id=&#34;rdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt&#34;&gt;#&lt;/a&gt; RDT&lt;/h2&gt;
&lt;h4 id=&#34;rdt20的关键要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt20的关键要点&#34;&gt;#&lt;/a&gt; rdt2.0 的关键要点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;比特错误检测&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据在传输过程中可能会发生比特翻转（bit-flip），导致数据出错。&lt;/li&gt;
&lt;li&gt;rdt2.0 使用校验和（checksum）来检测数据包中的比特错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确认和否认机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ACK（Acknowledgements）&lt;/strong&gt;：当接收方确认数据包没有错误时，会发送 ACK（确认）消息给发送方，告知数据包正确接收。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAK（Negative Acknowledgements）&lt;/strong&gt;：当接收方检测到数据包出错时，会发送 NAK（否认）消息给发送方，告知该数据包有错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重传机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当发送方收到 NAK 时，会重传数据包，以确保数据正确到达接收方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;新增机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;错误检测&lt;/strong&gt;：通过校验和实现比特错误检测。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接收方反馈&lt;/strong&gt;：接收方通过控制消息（ACK 和 NAK）向发送方反馈接收状态，使发送方能够知道数据包是否需要重传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;rdt20的工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt20的工作流程&#34;&gt;#&lt;/a&gt; rdt2.0 的工作流程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;发送方发送数据包，数据包中包含校验和。&lt;/li&gt;
&lt;li&gt;接收方收到数据包后，检查校验和。
&lt;ul&gt;
&lt;li&gt;如果校验和匹配，说明数据包无错误，接收方发送 ACK 给发送方。&lt;/li&gt;
&lt;li&gt;如果校验和不匹配，说明数据包有错误，接收方发送 NAK，要求发送方重传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送方根据接收到的是 ACK 还是 NAK 来决定是否重传数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2Frdt.png&#34; alt&gt;&lt;/p&gt;
&lt;h4 id=&#34;示例发送方状态机解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例发送方状态机解析&#34;&gt;#&lt;/a&gt; 示例：发送方状态机解析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等待上层调用（Wait for call from above）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始状态，发送方等待上层应用调用  &lt;code&gt;rdt_send(data)&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;一旦有数据传入，发送方创建数据包（包括数据和校验和）  &lt;code&gt;sndpkt = make_pkt(data, checksum)&lt;/code&gt; ，并通过  &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;  将数据包发送到信道。&lt;/li&gt;
&lt;li&gt;发送完数据后，发送方进入等待 ACK 或 NAK 的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等待 ACK 或 NAK（Wait for ACK or NAK）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方在此状态下等待接收方的反馈。&lt;/li&gt;
&lt;li&gt;如果接收到的是 NAK（ &lt;code&gt;isNAK(rcvpkt)&lt;/code&gt; ），表示数据包出错，发送方会重传数据包  &lt;code&gt;udt_send(sndpkt)&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果接收到的是 ACK（ &lt;code&gt;isACK(rcvpkt)&lt;/code&gt; ），表示数据包已正确接收，发送方回到等待上层调用的初始状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;接收方状态机解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方状态机解析&#34;&gt;#&lt;/a&gt; 接收方状态机解析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等待数据包（Wait for call from below）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始状态，接收方等待数据包的到来。&lt;/li&gt;
&lt;li&gt;当接收到一个数据包  &lt;code&gt;rdt_rcv(rcvpkt)&lt;/code&gt;  后，接收方会检查数据包是否损坏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据包损坏或无误&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果数据包损坏（ &lt;code&gt;corrupt(rcvpkt)&lt;/code&gt; ）&lt;/strong&gt;：接收方发送 NAK（ &lt;code&gt;udt_send(NAK)&lt;/code&gt; ）通知发送方重传。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果数据包无误（ &lt;code&gt;notcorrupt(rcvpkt)&lt;/code&gt; ）&lt;/strong&gt;：接收方提取数据  &lt;code&gt;extract(rcvpkt, data)&lt;/code&gt; ，并将其交付给上层  &lt;code&gt;deliver_data(data)&lt;/code&gt; ，然后发送 ACK（ &lt;code&gt;udt_send(ACK)&lt;/code&gt; ）通知发送方数据已正确接收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2Frdt2%E7%BC%BA%E9%99%B7.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdt20的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt20的缺陷&#34;&gt;#&lt;/a&gt; rdt2.0 的缺陷&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 ACK 或 NAK 消息在传输过程中被损坏，发送方就无法知道接收方是否正确接收了数据包。&lt;/li&gt;
&lt;li&gt;发送方在这种情况下无法确定是否需要重传数据包，因为重传可能会导致接收方收到重复的数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不能直接重传的原因&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果发送方简单地重传数据包，可能会导致接收方接收到重复的数据，从而影响数据的正确性。&lt;/li&gt;
&lt;li&gt;由于发送方无法确定接收方的实际状态，因此简单的重传会导致数据包的冗余和不确定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理重复数据包的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理重复数据包的方法&#34;&gt;#&lt;/a&gt; 处理重复数据包的方法&lt;/h3&gt;
&lt;p&gt;为了解决 ACK/NAK 损坏的问题，以及可能导致的重复数据包，rdt2.0 需要进行以下改进：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加序列号（Sequence Number）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个数据包附加一个序列号，以区分数据包的唯一性。&lt;/li&gt;
&lt;li&gt;序列号帮助接收方识别出重复的数据包，从而避免重复交付。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;丢弃重复的数据包&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果接收方检测到数据包的序列号与上一个接收的数据包相同，则丢弃该数据包，不再传递给上层应用。&lt;/li&gt;
&lt;li&gt;这样可以确保即使发送方因 ACK/NAK 损坏而重传数据，接收方也不会重复处理相同的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超时重传&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了防止无限等待，发送方可以使用超时机制。在未收到 ACK/NAK 的情况下，发送方等待一段时间后自动重传数据包。&lt;/li&gt;
&lt;li&gt;超时机制确保数据包能够最终被成功接收，避免了无休止的等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;停止等待机制stop-and-wait&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#停止等待机制stop-and-wait&#34;&gt;#&lt;/a&gt; &lt;strong&gt;“停止等待” 机制（Stop and Wait）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在这种机制下，发送方每次仅发送一个数据包，然后等待接收方的 ACK 或 NAK 响应。&lt;/li&gt;
&lt;li&gt;只有在接收到 ACK 后，发送方才会继续发送下一个数据包。如果未收到 ACK（例如 ACK 损坏或丢失），发送方则会重传当前数据包。&lt;/li&gt;
&lt;li&gt;停止等待机制简化了协议的实现，但可能会导致传输效率下降，特别是在网络延迟较大时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;后续版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续版本&#34;&gt;#&lt;/a&gt; 后续版本&lt;/h3&gt;
&lt;h3 id=&#34;1-rdt21解决acknak损坏问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-rdt21解决acknak损坏问题&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;rdt2.1：解决 ACK/NAK 损坏问题&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：在 rdt2.0 中，如果 ACK 或 NAK 发生损坏，发送方无法判断接收方的状态，从而导致数据包的潜在重复或丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;改进&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列号&lt;/strong&gt;：引入序列号来标记数据包的唯一性。每个数据包使用 0 或 1 的序列号，以便接收方可以检测到重复的数据包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冗余 ACK&lt;/strong&gt;：如果 ACK 或 NAK 损坏，发送方会根据超时机制重发数据包。接收方在接收相同序列号的数据包时会丢弃重复的数据包，但仍会发送冗余 ACK。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态机调整&lt;/strong&gt;：发送方和接收方都需要跟踪序列号，发送方根据接收的 ACK 或 NAK 来判断是否需要重传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送方发送带序列号的包，并等待 ACK 或 NAK。&lt;/li&gt;
&lt;li&gt;接收方收到包后，根据校验和检测是否有错误。若无错误，发送 ACK，若有错误，发送 NAK。&lt;/li&gt;
&lt;li&gt;若 ACK/NAK 损坏，发送方超时后会重发数据包。接收方通过序列号来丢弃重复包。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：rdt2.1 通过序列号和 ACK 重传解决了 ACK/NAK 损坏的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-rdt22仅使用ack无nak&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-rdt22仅使用ack无nak&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;rdt2.2：仅使用 ACK，无 NAK&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：rdt2.1 依赖 ACK 和 NAK 双重反馈，但在实际网络中，使用 NAK 可能会引入额外的复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;纯 ACK 机制&lt;/strong&gt;：取消了 NAK，接收方只使用 ACK 来响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冗余 ACK 机制&lt;/strong&gt;：如果接收方检测到数据包有错误（如校验和失败），则不发送 NAK，而是重复发送上一条 ACK。发送方在接收冗余 ACK 后，将重传数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;发送方发送带序列号的包，并等待 ACK。&lt;/li&gt;
&lt;li&gt;接收方若检测到包无错误，则发送 ACK。如果检测到包有错误，发送上一个包的 ACK（即冗余 ACK）。&lt;/li&gt;
&lt;li&gt;发送方在接收到冗余 ACK 时，将当前包重发。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：rdt2.2 避免了 NAK 的使用，简化了接收方逻辑。该版本仅依赖 ACK，进一步提高了效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-rdt30处理信道丢包问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-rdt30处理信道丢包问题&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;rdt3.0：处理信道丢包问题&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：rdt2.x 版本解决了比特错误问题，但假设信道不会丢包。然而，在实际网络中，数据包可能会丢失，因此 rdt2.x 无法保证在丢包信道上的可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超时重传机制&lt;/strong&gt;：rdt3.0 在发送方引入了超时重传机制。发送方在发送数据包后，启动一个定时器。如果在超时时间内未收到 ACK，则自动重传数据包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序列号&lt;/strong&gt;：继续使用序列号来检测重复包，确保接收方不会交付重复数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;发送方发送带序列号的包，并等待 ACK，同时启动定时器。&lt;/li&gt;
&lt;li&gt;接收方收到包后，若无错误，则发送 ACK 并交付数据；若有错误，发送冗余 ACK。&lt;/li&gt;
&lt;li&gt;若发送方在超时时间内未收到 ACK，自动重传数据包。&lt;/li&gt;
&lt;li&gt;接收方通过序列号丢弃重复包，保证数据无重复交付。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：rdt3.0 通过超时重传机制解决了丢包问题，能够在信道丢包和比特错误情况下实现可靠传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rdt2.1&lt;/strong&gt;：在 rdt2.0 的基础上引入序列号，用 ACK 和 NAK 解决确认消息损坏的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rdt2.2&lt;/strong&gt;：去除 NAK，仅使用 ACK 机制，通过冗余 ACK 实现重传，简化了协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rdt3.0&lt;/strong&gt;：引入超时重传机制，解决了信道丢包的问题，实现了在丢包和比特错误信道上的可靠数据传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rdt3.0 是这几个版本中最可靠的协议，适用于丢包和比特错误的复杂信道环境。&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="计算机网络" scheme="http://example.com/categories/computer/networks/" />
        <updated>2024-10-28T00:59:00.718Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/25/game-engine/unity/unityCompetition/%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%88%B0%E7%A0%81%E4%BA%91/</id>
        <title>创建并添加代码到gitee</title>
        <link rel="alternate" href="http://example.com/2024/10/25/game-engine/unity/unityCompetition/%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%88%B0%E7%A0%81%E4%BA%91/"/>
        <content type="html">&lt;h3 id=&#34;1-创建-github-仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建-github-仓库&#34;&gt;#&lt;/a&gt; 1. 创建 GitHub 仓库&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;登录到 [Gitee](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20v&#34;&gt;工作台 - Gitee.com&lt;/span&gt;)。&lt;/li&gt;
&lt;li&gt;点击右上角的 &lt;strong&gt;&amp;quot;+&amp;quot;&lt;/strong&gt;，选择 &lt;strong&gt;&amp;quot;New repository&amp;quot;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;输入仓库名称和其他信息，然后点击 &lt;strong&gt;&amp;quot;Create repository&amp;quot;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;复制仓库的 HTTPS 或 SSH 链接（例如， &lt;code&gt;https://github.com/username/repository.git&lt;/code&gt; ）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-初始化本地仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-初始化本地仓库&#34;&gt;#&lt;/a&gt; 2. 初始化本地仓库&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity%2F%E5%85%8B%E9%9A%86.png&#34; alt=&#34;图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/unity%2Fgit%E5%B9%B3%E5%8F%B0.png&#34; alt=&#34;图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;在本地项目文件夹中打开终端或命令行，执行以下命令：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 初始化 Git 仓库 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git init  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 将远程仓库链接到本地仓库 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git remote add origin (仓库地址)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-添加文件并提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-添加文件并提交&#34;&gt;#&lt;/a&gt; 3. 添加文件并提交&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将更改添加到暂存区&lt;/strong&gt;：&lt;br&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;  表示添加所有文件，或指定特定文件来添加，比如  &lt;code&gt;git add filename&lt;/code&gt; 。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;提交更改&lt;/strong&gt;：&lt;br&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git commit -m &lt;span class=&#34;string&#34;&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 &lt;code&gt;-m&lt;/code&gt;  后面跟的是提交信息，简要描述更改内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-推送代码到-github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-推送代码到-github&#34;&gt;#&lt;/a&gt; 4. 推送代码到 GitHub&lt;/h3&gt;
&lt;p&gt;将本地代码推送到 GitHub 仓库的  &lt;code&gt;main&lt;/code&gt;  分支：&lt;br&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git push -u origin main&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 注意&lt;/strong&gt;：首次推送时需要指定  &lt;code&gt;-u&lt;/code&gt;  选项，以后可以直接使用  &lt;code&gt;git push&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;5-验证提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-验证提交&#34;&gt;#&lt;/a&gt; 5. 验证提交&lt;/h3&gt;
&lt;p&gt;在 Gitee 仓库页面刷新，您应该可以看到已提交的代码。&lt;/p&gt;
&lt;h3 id=&#34;6-拉取代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-拉取代码&#34;&gt;#&lt;/a&gt; 6. 拉取代码&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;row&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;clone&lt;/span&gt; (仓库地址)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <category term="游戏引擎" scheme="http://example.com/categories/game-engine/" />
        <category term="unity" scheme="http://example.com/categories/game-engine/unity/" />
        <category term="unity创想赛" scheme="http://example.com/categories/game-engine/unity/unityCompetition/" />
        <updated>2024-10-25T00:35:46.379Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/10/23/computer/networks/assignment2%20%E9%A2%98%E7%9B%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A7%A3%E6%9E%90/</id>
        <title>assignment2</title>
        <link rel="alternate" href="http://example.com/2024/10/23/computer/networks/assignment2%20%E9%A2%98%E7%9B%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A7%A3%E6%9E%90/"/>
        <content type="html">&lt;h2 id=&#34;1sdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1sdn&#34;&gt;#&lt;/a&gt; 1.SDN&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks%2Fass2%2FSnipaste_2024-10-23_09-51-25.png&#34; alt=&#34;图片描述&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RIP（Routing Information Protocol）：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本原理&lt;/strong&gt;：RIP 使用一种称为 &lt;strong&gt;距离向量（Distance Vector）&lt;/strong&gt; 的路由算法。它通过跳数（hop count）来衡量到达目标网络的距离，跳数即从一个路由器到目标网络需要经过的路由器数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跳数限制&lt;/strong&gt;：RIP 的最大跳数为 15，跳数达到 16 被视为不可到达。这意味着 RIP 适用于较小的网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新频率&lt;/strong&gt;：RIP 每 30 秒向其邻居广播路由表更新信息，这样做会增加网络负载，尤其是在大型网络中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收敛速度慢&lt;/strong&gt;：因为 RIP 需要依靠定期更新，所以在网络拓扑发生变化时，其收敛速度较慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版本&lt;/strong&gt;：RIP 有两个版本，RIP v1（不支持子网掩码）和 RIP v2（支持子网掩码，增加了安全和效率特性）​​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：由于 RIP 的跳数限制和较慢的收敛时间，它通常适用于小型或中型网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;OSPF（Open Shortest Path First）：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本原理&lt;/strong&gt;：OSPF 是一种&lt;strong&gt;链路状态（Link State）&lt;/strong&gt; 路由协议，它通过一种称为&lt;strong&gt; Dijkstra 算法&lt;/strong&gt;的链路状态算法来计算最短路径。OSPF 可以基于多种因素（如带宽、延迟、链路成本）计算最佳路径，而不仅仅依赖于跳数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无跳数限制&lt;/strong&gt;：OSPF 没有跳数限制，适用于大型复杂的网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区域划分&lt;/strong&gt;：OSPF 将大型网络划分为多个区域（Area），这样有助于降低网络复杂性，减少路由表规模，提高路由效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速收敛&lt;/strong&gt;：OSPF 具有快速的收敛特性。当网络拓扑发生变化时，OSPF 能够迅速检测到变化，并重新计算最佳路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本计算&lt;/strong&gt;：OSPF 使用基于带宽的成本来计算最佳路径，网络管理员可以配置链路的成本值来优化路由选择​​。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多播更新&lt;/strong&gt;：与 RIP 的广播不同，OSPF 使用多播（multicast）来传播链路状态信息，降低了不必要的网络流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：OSPF 适用于中型到大型网络，特别是在需要复杂路由选择和快速收敛的情况下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而&lt;strong&gt; SDN&lt;/strong&gt;，也就是&lt;strong&gt;软件定义网络&lt;/strong&gt;（Software-Defined Networking），是一种让网络更 “智能” 和 “灵活” 的新技术。通俗地说，它打破了传统网络的限制，使得我们能够像编写软件一样，灵活地控制网络中的设备。&lt;br&gt;
通俗解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传统网络是怎么工作的？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在传统网络中，路由器和交换机这样的设备自己做决策，决定数据从哪里进、到哪里出。每个设备都有自己的 “大脑”（控制系统），它们通过自己内部的规则来决定如何转发数据。&lt;/li&gt;
&lt;li&gt;这种方式的缺点是：每台设备只能知道自己周围的一些情况，无法掌控整个网络。因此，管理网络变得很复杂，如果要改变某个地方的流量，可能需要逐一配置很多设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SDN 是怎么做的？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDN 通过&lt;strong&gt;把网络设备的 “大脑” 集中起来&lt;/strong&gt;，统一用一个 “中央控制器” 来控制所有网络设备。这就像有一个总指挥官，能看到整个网络的全貌，并能迅速决定数据的最佳传输路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据设备变成 “执行者”&lt;/strong&gt;：路由器和交换机不再自己做决定，而是听从控制器的指令，负责把数据按照命令发送到正确的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为什么 SDN 更好？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;灵活控制&lt;/strong&gt;：就像编写程序一样，管理员可以通过软件定义网络流量，自动化配置，而不需要手动去调整每个设备的设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局视角&lt;/strong&gt;：控制器能看到整个网络的流量情况，能够根据实时情况动态调整，比如：在某个地方流量很大时，可以自动分流到其他路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化管理&lt;/strong&gt;：可以编写规则，自动化处理网络中的问题，比如检测到网络拥塞时，可以自动调整路由来缓解压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note danger no-icon&#34;&gt;
&lt;p&gt;传统路由协议都是通过一定的算法和 cost 来决定走向，所以在这道题无法实现负载均衡，传统方式很难通过路由判断并走向设定好的路线，不是通过实时的负载和流量来判断的。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2tcp&#34;&gt;#&lt;/a&gt; 2.TCP&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1321157486.cos.ap-nanjing.myqcloud.com/networks/ass2/Snipaste_2024-10-23_09-51-55.png&#34; alt=&#34;图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP Reno&lt;/strong&gt; 是一种 &lt;strong&gt;TCP（传输控制协议）&lt;/strong&gt; 拥塞控制算法，是经典 &lt;strong&gt;TCP Tahoe&lt;/strong&gt; 算法的改进版本。TCP Reno 主要优化了拥塞检测和恢复过程，特别是在数据丢包后的表现。它通过在检测到丢包时引入 &lt;strong&gt;快速恢复（Fast Recovery）&lt;/strong&gt; 和 &lt;strong&gt;快速重传（Fast Retransmit）&lt;/strong&gt; 机制，使得丢包后的恢复效率更高。&lt;/p&gt;
&lt;h3 id=&#34;tcp-reno的主要特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-reno的主要特性&#34;&gt;#&lt;/a&gt; TCP Reno 的主要特性：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;慢启动（Slow Start）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当连接开始或检测到网络超时时，&lt;strong&gt;拥塞窗口（cwnd）&lt;/strong&gt; 从较小值（通常是 1 个 MSS，即最大报文段）开始，随着每次接收到 ACK 后，cwnd 以指数增长的方式逐渐增大，直到达到一个阈值（&lt;strong&gt;ssthresh&lt;/strong&gt;，慢启动阈值）​​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拥塞避免（Congestion Avoidance）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 cwnd 增长到超过 ssthresh 时，TCP 进入拥塞避免阶段，cwnd 不再指数增长，而是线性增长，每个 RTT（往返时间）增加 1 个 MSS。这一机制能够更平缓地增加发送速率，减少网络拥塞的风险​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;快速重传（Fast Retransmit）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当发送方接收到&lt;strong&gt; 3 个重复的 ACK&lt;/strong&gt; 时，TCP Reno 假设网络发生了丢包，而不是等到超时来判断丢包。这时，TCP Reno 会立即重传该丢失的数据段，而不等待超时，从而提高丢包后的响应速度​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;快速恢复（Fast Recovery）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 TCP Tahoe 中，丢包后会将&lt;strong&gt; cwnd&lt;/strong&gt; 立即减小到 1MSS，然后重新进入慢启动阶段。但 TCP Reno 在检测到 3 个重复的 ACK 后，会将 cwnd 减半（进入快速恢复），然后进入线性增长的拥塞避免阶段，而不是回到慢启动。这一优化使得 TCP Reno 在处理丢包时更加高效，不会像 Tahoe 一样大幅降低传输速度​​。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp-reno的工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-reno的工作流程&#34;&gt;#&lt;/a&gt; TCP Reno 的工作流程：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始阶段&lt;/strong&gt;：从慢启动开始，cwnd 呈指数增长，直到达到 ssthresh。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免&lt;/strong&gt;：一旦 cwnd 达到 ssthresh，cwnd 以线性速度增长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢包检测&lt;/strong&gt;：当接收到 3 个重复 ACK 时，TCP Reno 立即触发&lt;strong&gt;快速重传&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Congestion 发生后 (lost packet)&lt;br&gt;
1）timeout
&lt;ul&gt;
&lt;li&gt;cwnd=1,ssthresh 变为当前 cwnd 的一半，并从 slow start 开始&lt;br&gt;
 2) dup&lt;/li&gt;
&lt;li&gt;cwnd 变为 lost packet 时的一半，并从 addtive increase 即拥塞避免开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速恢复&lt;/strong&gt;：cwnd 减半，进入快速恢复阶段，避免完全进入慢启动。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;与tcp-tahoe的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与tcp-tahoe的区别&#34;&gt;#&lt;/a&gt; 与 TCP Tahoe 的区别：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP Tahoe&lt;/strong&gt; 在丢包时会将 cwnd 直接减小到 1，并重新进入慢启动阶段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP Reno&lt;/strong&gt; 则引入了&lt;strong&gt;快速恢复&lt;/strong&gt;机制，丢包时不再完全进入慢启动，而是减半 cwnd 并进入线性增长的拥塞避免阶段，这显著减少了网络中的恢复时间​​。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP Reno 由于其更加高效的丢包恢复机制，成为 TCP 协议中较为常用的拥塞控制算法之一，尤其适用于高延迟、大带宽的网络环境。&lt;/p&gt;
&lt;h3 id=&#34;p2p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p&#34;&gt;#&lt;/a&gt; P2P&lt;/h3&gt;
&lt;p&gt;file distribution: 把文件发给 N 个主机&lt;/p&gt;
</content>
        <category term="计算机科学" scheme="http://example.com/categories/computer/" />
        <category term="计算机网络" scheme="http://example.com/categories/computer/networks/" />
        <updated>2024-10-22T22:48:25.919Z</updated>
    </entry>
</feed>
